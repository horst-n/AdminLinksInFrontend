<?php
/**
*  Module: ALIF - Admin Links In Frontend
*  Author: Horst Nogajski, http://nogajski.de/
*
*  Admin Helper, can display an admin toolbar on the frontend of a site!
*
*
*  ProcessWire 2.3+
*  Copyright (C) 2010 by Ryan Cramer
*  Licensed under GNU/GPL v2, see LICENSE.TXT
*
*  http://www.processwire.com
*  http://www.ryancramer.com
*/

class AdminLinksInFrontend extends WireData implements Module, ConfigurableModule {

    private static $pwv = '';
    private static $pwvUAS = '2.6.8';
    private static $pwvShowIf = '2.6.0';
    private static $pwvRequires = '2.5.0';

    public static function getModuleInfo() {
        $summary = __('Adds a customizable toolbar to the front-end, including buttons like admin link, edit page and one-click user switching!');
        if(version_compare(self::$pwv, self::$pwvUAS, '<')) $summary = __('Adds a customizable toolbar to the front-end, including buttons like admin link, edit page and more!');
        $info = array(
            'title'    => 'ALIF - Admin Links In Frontend',
            'version'  => '0.9.12',
            'author'   => 'Horst Nogajski',
            'summary'  => $summary,
            'singular' =>  true,
            'autoload' =>  true,
            'requires' => 'ProcessWire>=2.3.0, PHP>=5.3.8',
            'icon'     => 'link',
        );
        if(version_compare(self::$pwv, self::$pwvRequires, '<')) unset($info['requires']);
        return $info;
    }

    public static function getModuleConfigInputfields(array $data) {
        return wire('modules')->get(__CLASS__)->getForm();
    }

    public function ___install() {
        try {
            $this->session->remove('alifDataImport');
            $this->session->remove('alifDataImportStep');
            $this->session->remove('alifBackupData');
            $this->session->remove('alifValidImportData');
            $perm = $this->permissions->get(self::$alifPermission);
            $role = $this->roles->get(self::$alifSuperuserRole);
            if(!$perm->id > 0) {
                $perm = $this->permissions->add(self::$alifPermission);
                $perm->title = $this->lang(79);
                $this->permissions->save($perm);
            }
            if(!$role->id > 0) {
                $role = $this->roles->add(self::$alifSuperuserRole);
                $this->roles->save($role);
            }
            if($role->id > 0 && !$role->hasPermission($perm)) {
                $role->addPermission($perm);
                $this->roles->save($role);
            }
        } catch(Exception $e) {
            $this->error($e->getMessage());
        }
    }

    public function ___uninstall() {
        try {
            $this->session->remove('alifDataImport');
            $this->session->remove('alifDataImportStep');
            $this->session->remove('alifBackupData');
            $this->session->remove('alifValidImportData');
            $perm = $this->permissions->get(self::$alifPermission);
            $role = $this->roles->get(self::$alifSuperuserRole);
            if($role->id > 0) {
                $this->roles->delete($role);
            }
            if($perm->id > 0) {
                $this->permissions->delete($perm);
            }
        } catch(Exception $e) {
            $this->error($e->getMessage());
        }
    }



    // settings
    private static $alifPermission = 'alif-user-account-switcher';
    private static $alifSuperuserRole = 'alif-superuser';
    private static $lockfile = 'alif_uas_session.cache';
    private static $buttons = array(
        'adminpage' => 'PW Admin (goto)',
        'dimensions' => 'Dimensions (show)',
        'settings' => 'ALIF Settings (goto)',
        'destroy' => 'Session Destroy (do)',
        'logout' => 'Logout (do)',
        'login' => 'Login (goto)',
        'editpage' => 'Editpage (goto)',
        'debugmode' => 'Debugmode (info)',
        'imagesizerforcenew' => 'Imagesizer Forcenew (info)',
        'aov' => 'Access Overview (goto)'
    );
    private static $factorySettings = array(
        'zindex' => 8844,     // MountEverest :)
        'colorset' => 'skin1',
        'stacked' => 'horizontal',
        'position_tb' => 'top',
        'position_tb_px' => '120px',
        'position_lr' => 'left',
        'position_lr_px' => '0',
        'skin1_label' => 'skin1', 'skin1_color' => 'fff', 'skin1_bg_regular' => '364d68', 'skin1_bg_edit' => '3EB998', 'skin1_bg_info' => '4285F4', 'skin1_bg_warning' => 'E83561',
        'skin2_label' => 'skin2', 'skin2_color' => '000', 'skin2_bg_regular' => 'E2E9EF', 'skin2_bg_edit' => '3EB998', 'skin2_bg_info' => 'FFFFDD', 'skin2_bg_warning' => 'FC5D89',
        'skin3_label' => 'skin3', 'skin3_color' => '000', 'skin3_bg_regular' => 'DDDDDD', 'skin3_bg_edit' => 'DDFFDD', 'skin3_bg_info' => 'FFFFDD', 'skin3_bg_warning' => 'FFDDDD',
        'skin4_label' => 'skin4', 'skin4_color' => 'fff', 'skin4_bg_regular' => '555555', 'skin4_bg_edit' => '559955', 'skin4_bg_info' => '999955', 'skin4_bg_warning' => '995555',
        'use_advanced_links' => 0,
        'use_user_switcher' => 0,
        'user_accounts_extrarow' => 1,
        'import_enabled' => 0,
        'export_enabled' => 0,
        'data_import' => '',
        'data_export' => '',
        #'buttons_enabled' => array('adminpage', 'settings', 'destroy', 'logout', 'login', 'editpage', 'debugmode', 'imagesizerforcenew'),
        'user_accounts' => array(),
        'uas_session_duration' => 0,
        'admin_ip' => '',
        'cccID' => ''
    );
    private $skins = array();
    private $hasAOV = false;
    private $dataCorrections1 = array();
    private $dataCorrections2 = array();
    private $dataCorrections = array();
    private $validUserAccounts = array();
    private $alifWasLoggedinAsSuperuser = false;
    private $needRedirectAfterSwitch = '';



    // initialization
    public function __construct() {
        self::$pwv = wire('config')->version;
    }

    public function init() {}

    public function ready() {

        // fields that need to be resetted in data storage
        $this->dataCorrections1 = array('data_export' => '', 'data_import' => '', 'export_enabled' => 0, 'import_enabled' => 0,
                                 'import_proceed' => 0, 'start_uas_session' => 0);
        $this->dataCorrections2 = array('import_item_skin1' => 0, 'import_item_skin2' => 0, 'import_item_skin3' => 0, 'import_item_skin4' => 0,
                                 'import_item_ual' => 0, 'import_item_uas' => 0, 'import_item_pos' => 0);
        $this->dataCorrections = array_merge($this->dataCorrections1, $this->dataCorrections2);

        // is ProcessAccessOverview available?
        $this->hasAOV = (bool)$this->modules->isInstalled('ProcessAccessOverview');
        if(!$this->hasAOV) unset(self::$buttons['aov']);

        // prepare, restore $data and make it available in the whole module
        self::$factorySettings['buttons_enabled'] = array_keys(self::$buttons);
        if(1 == $this->session->get('alifDataImportStep') && $this->session->get('alifBackupData')) {
            $this->data = array_merge(self::$factorySettings, $this->session->get('alifBackupData'), $this->dataCorrections);
        } else {
            $this->data = array_merge(self::$factorySettings, wire('modules')->getModuleConfigData(__CLASS__), $this->dataCorrections);
        }
        self::writeModuleConfigData(__CLASS__, $this->data);


        if('admin' == $this->page->template->name && 'module' == $this->page->name && __CLASS__ == $this->input->get('name')) {
        // >>> Import data from Backup or other Installation

            if(!$this->session->get('alifDataImportStep')) {
                // import related reset
                $this->session->set('alifDataImport', null);
                $this->session->set('alifDataImportStep', 0);
                $this->session->remove('alifBackupData');
                $this->session->remove('alifValidImportData');
            }

            // this is second submit of import wizzard
            if(1 == $this->session->get('alifDataImportStep') && $this->input->post->import_proceed) {
                $newData = array();
                foreach($this->input->post as $k => $v) {
                    if(substr($k, 0, 12) != 'import_item_') continue;
                    $item = substr($k, 12);
                    $newData = array_merge($newData, $this->import_select_items($item));
                }
                $oldData = $this->session->get('alifBackupData') ? $this->session->get('alifBackupData') : $this->modules->getModuleConfigData(__CLASS__);
                $newData = array_merge(self::$factorySettings, $oldData, $newData, $this->dataCorrections);
                #foreach($this->dataCorrections2 as $k => $v) unset($newData[$k]);
                $this->data = $newData;
                self::writeModuleConfigData(__CLASS__, $newData);
                unset($newData);
                // now we have to do the dishes
                $this->session->remove('alifDataImport');
                $this->session->remove('alifDataImportStep');
                $this->session->remove('alifBackupData');
                $this->session->remove('alifValidImportData');
                $this->session->redirect('./edit/?name=' . __CLASS__);
            }

            // this is second submit of import wizzard
            if(1 == $this->session->get('alifDataImportStep') && $this->input->post->import_proceed_aborted) {
                $oldData = $this->session->get('alifBackupData') ? $this->session->get('alifBackupData') : $this->modules->getModuleConfigData(__CLASS__);
                self::writeModuleConfigData(__CLASS__, $oldData);
                // if it was aborted or if we previously proceeded the import, now we have to do the dishes
                $this->session->remove('alifDataImport');
                $this->session->remove('alifDataImportStep');
                $this->session->remove('alifBackupData');
                $this->session->remove('alifValidImportData');
                $this->session->redirect('./edit/?name=' . __CLASS__);
            }

            // this is first submit of import wizzard
            if(0 == $this->session->get('alifDataImportStep') && $this->input->post->import_enabled && $this->input->post->data_import) {
                $this->session->set('alifDataImportStep', 1);
                $this->session->set('alifBackupData', $this->data);
                // validate post data
                $postData = array_merge(unserialize($this->input->post->data_import), $this->dataCorrections);
                foreach($this->dataCorrections as $k => $v) unset($postData[$k]);
                $res = $this->import_validation($postData);
                $this->session->set('alifDataImport', $res);
                if($res) {
                    $this->session->set('alifValidImportData', $postData);
                }
            }

        // <<< Import data from Backup or other Installation
        }


        // check if we can use API method $session->forceLogin($user) (without password !)
        $this->validUserAccounts = array();
        if(version_compare($this->config->version, self::$pwvUAS, '<')) {
            $this->data['use_user_switcher'] = 0;
            unset($this->data['user_accounts']);
            $this->data['uas_session_duration'] = 0;
            $this->data['admin_ip'] = '';
        } else {
            if($this->uas_isValidSuperuser()) {
                $this->session->set('alifWasLoggedinAsSuperuser', true);
            }
            if(isset($this->data['user_accounts']) && is_array($this->data['user_accounts'])) {
                foreach($this->data['user_accounts'] as $ua) {
                    $this->validUserAccounts[$ua] = $ua;
                }
            }
            if('admin' == $this->page->template->name && 'module' == $this->page->name && __CLASS__ == $this->input->get('name')) {
                if($this->input->post('start_uas_session')) $this->uas_start();
            }
        }
        if((bool)$this->data['use_advanced_links'] || (bool)$this->data['use_user_switcher']) {
            $this->pages->addHookBefore('ProcessLogin::execute', $this, 'hookBeforeProcessLogin');
            $this->pages->addHookBefore('ProcessLogin::executeLogout', $this, 'hookBeforeProcessLogout');
            $this->pages->addHookAfter('Session::logout', $this, 'hookAfterSessionLogout');
            $this->pages->addHookAfter('Session::login', $this, 'hookAfterSessionLogin');
            if($this->modules->isInstalled('ProCache') && 'admin' != $this->page->template) {
                $this->pages->addHookAfter("ProCache::allowCacheForPage", $this, 'hookAfterProCacheAllowCacheForPage');
            }
        }
    }



    // Hooks
    public function hookBeforeProcessLogin(HookEvent $event) {
        if(!$this->input->get('switchUA')) return;
        // store the redirect URL
        $this->needRedirectAfterSwitch = $this->input->get('alifRedirectIn') ? $this->sanitizer->url($this->input->get('alifRedirectIn')) : '';
        // validate UAS Session User
        $this->alifWasLoggedinAsSuperuser = $this->session->get('alifWasLoggedinAsSuperuser') && $this->uas_isValidSessionUser();
        if($this->hookSwitchUser()) {
            $this->session->redirect($this->needRedirectAfterSwitch);
        }
    }

    public function hookBeforeProcessLogout(HookEvent $event) {
        if($this->input->get('destroySession') && 'destroySession' == $this->input->get('destroySession')) {
            $this->needRedirectAfterSwitch = $this->input->get('alifRedirectOut') ? $this->sanitizer->url($this->input->get('alifRedirectOut')) : '';
            $this->uas_destroy();
            if($this->needRedirectAfterSwitch) {
                $this->session->redirect($this->needRedirectAfterSwitch);
            }
            return;
        }
        if(!$this->user->isLoggedin()) return;
        if(!$this->input->get('alifRedirectOut')) return;
        $this->needRedirectAfterSwitch = $this->input->get('alifRedirectOut') ? $this->sanitizer->url($this->input->get('alifRedirectOut')) : '';
        $this->alifWasLoggedinAsSuperuser = $this->session->get('alifWasLoggedinAsSuperuser') && $this->uas_isValidSessionUser();
        $this->session->logout();
        if(!$this->needRedirectAfterSwitch) return;
        $this->session->redirect($this->needRedirectAfterSwitch);
    }

    public function hookAfterSessionLogout(HookEvent $event) {
        if((bool)$this->data['use_user_switcher'] && $this->uas_isValidSessionUser()) {
            // restore session setting with guest account
            if($this->alifWasLoggedinAsSuperuser) $event->object->set('alifWasLoggedinAsSuperuser', true);
        }
        if((bool)$this->data['use_advanced_links']) {
            // restore / set flag in session, if advanced mode is requested
            $event->object->set('alifWasLoggedin', true);
        }
    }

    public function hookAfterSessionLogin(HookEvent $event) {
        if($this->alifWasLoggedinAsSuperuser) {
            $event->object->set('alifWasLoggedinAsSuperuser', true);
            $event->object->set('SuppressDBautoBackup', true);
        }
        $event->object->remove('alifWasLoggedin');
    }

    public function hookAfterProCacheAllowCacheForPage(HookEvent $event) {
        $cache = $event->return;
        if(true !== $cache) return;
        if(true === $this->config->debug) $cache = false;
        if(true === $this->session->get('alifWasLoggedin')) $cache = false;
        if(true === $this->session->get('alifWasLoggedinAsSuperuser')) $cache = false;
        $event->return = $cache;
    }

    private function hookSwitchUser() {
        $ua = $this->sanitizer->pageName($this->input->get('switchUA'));
        // to become guest, only log out the current user
        if('guest' == $ua) {
            if($this->user->isLoggedin()) $this->session->logout();
            return true;
        }
        // before trying to login, check if it is a valid request
        if(!isset($this->validUserAccounts[$ua]) || !$this->uas_isValidSessionUser()) {
            $this->uas_destroy();
            return false;
        }
        // login as a new user
        $u = $this->session->forceLogin($ua);
        return (is_object($u) && $u instanceof User) ? true : false;
    }



    // UAS security
    private function uas_start() {
        if(!$this->uas_isValidSuperuser()) return false;
        $time = time();
        $ttl = (int)$this->data['uas_session_duration'];
        $ttl = $ttl >= 2 && $ttl <= 60 ? $ttl : 2;
        $endtime = $time + intval(60 * $ttl); // add minutes to current timestamp
        $data = serialize(array('fingerprint' => $this->uas_getFingerprint(), 'endtime' => $endtime));
        return strlen($data) === file_put_contents($this->uas_getFilename(), $data, LOCK_EX);
    }

    private function uas_destroy() {
        @unlink($this->uas_getFilename());
        $this->alifWasLoggedinAsSuperuser = false;
        $this->session->remove('alifWasLoggedinAsSuperuser');
        if($this->user->isLoggedin()) $this->session->logout();
        $this->session->remove('alifWasLoggedin');
        $this->session->remove('alifWasLoggedinAsSuperuser');
    }

    private function uas_sessionTimeToLive() {
        $file = $this->uas_getFilename();
        if(!is_readable($file)) return 'N/A';
        $data = unserialize(file_get_contents($file));
        return strval(ceil(((int)$data['endtime'] - time()) / 60));
    }

    private function uas_sessionTimeToLiveInformational() {
        $m = $this->uas_sessionTimeToLive();
        return 'N/A' === $m || 0 > $m ? '' : $m;
    }

    private function uas_isValidSessionUser() {
        $file = $this->uas_getFilename();
        if(!is_readable($file)) return false;
        $data = unserialize(file_get_contents($file));
        if($this->uas_getFingerprint() != $data['fingerprint']) return false;
        if($data['endtime'] <= time()) return false;
        return true;
    }

    private function uas_isValidSuperuser() {
        if(!$this->user->isSuperuser()) return false;
        if($this->user->hasRole(self::$alifSuperuserRole)) return true;
        $su = $this->get('roles')->get('superuser');
        if(empty($su)) return false;
        foreach($su->permissions as $p) {
            if(self::$alifPermission == $p->name) return true;
        }
        return false;
    }

    private function uas_getFilename() {
        return $this->config->paths->cache . self::$lockfile;
    }

    private function uas_getFingerprint() {
        // if admin has entered a valid IP-Adress by hand, we want to check only this against REMOTE_ADRESS
        if(isset($this->data['admin_ip']) && filter_var($this->data['admin_ip'], FILTER_VALIDATE_IP) !== false) {
            $fp = self::uas_getRemoteIP(true);
        } else {
            $ip1 = self::uas_getRemoteIP();
            $ip2 = self::uas_getRemoteIP(true);
            $fp = $ip1 != $ip2 ? "{$ip1}-{$ip2}" : $ip1;
        }
        if(isset($_SERVER['HTTP_USER_AGENT'])) $fp .= '-' . md5($_SERVER['HTTP_USER_AGENT']);
        return $fp;
    }

    private static function uas_getRemoteIP($onlyLast = false) {
        if($onlyLast) {
            return trim($_SERVER['REMOTE_ADDR']);
        }
        foreach(array('HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'HTTP_X_FORWARDED', 'HTTP_X_CLUSTER_CLIENT_IP', 'HTTP_FORWARDED_FOR', 'HTTP_FORWARDED', 'REMOTE_ADDR') as $key) {
            if(array_key_exists($key, $_SERVER) === true) {
                foreach(explode(',', $_SERVER[$key]) as $ip) {
                    $ip = trim($ip); // just to be safe
                    #if(filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) !== false) {
                    if(filter_var($ip, FILTER_VALIDATE_IP) !== false) {
                        return $ip;
                    }
                }
            }
        }
    }



    // import validation / sanitization
    private function import_validation(&$postData) {
        $allValidItems = true;
        $validData = array();
        foreach($postData as $k => $v) {
            if('user_accounts' == $k) {
                if(!is_array($v)) {
                    $validData[$k] = array();
                } else {
                    $userAccounts = array();
                    foreach($v as $ua) {
                        $u = $this->users->get($ua);
                        if(!is_object($u) || $ua != $u->name) continue;
                        $userAccounts[] = $ua;
                    }
                    $validData[$k] = $userAccounts;
                    unset($userAccounts, $ua, $u);
                }
            } else if('buttons_enabled' == $k) {
                $buttonsEnabled = array();
                foreach($v as $button) {
                    if(!isset(self::$buttons[$button])) continue;
                    $buttonsEnabled[] = $button;
                }
                $validData[$k] = $buttonsEnabled;
                unset($buttonsEnabled);
            } else {
                if(!$this->import_validation_item($k, $v)) {
                    $allValidItems = false;
                    continue;
                }
                $validData[$k] = $v;
            }
        }
        $postData = $validData;
        return $allValidItems;
    }

    private function import_validation_item($k, &$v) {
        $isValid = false;
        switch($k) {
            case 'skin1_color':        // HEX colors
            case 'skin1_bg_regular':
            case 'skin1_bg_edit':
            case 'skin1_bg_info':
            case 'skin1_bg_warning':
            case 'skin2_color':
            case 'skin2_bg_regular':
            case 'skin2_bg_edit':
            case 'skin2_bg_info':
            case 'skin2_bg_warning':
            case 'skin3_color':
            case 'skin3_bg_regular':
            case 'skin3_bg_edit':
            case 'skin3_bg_info':
            case 'skin3_bg_warning':
            case 'skin4_color':
            case 'skin4_bg_regular':
            case 'skin4_bg_edit':
            case 'skin4_bg_info':
            case 'skin4_bg_warning':
                $v = self::convertRgbColorToHex(self::sanitizeColor($v));
                $isValid = true;
                break;

            case 'use_advanced_links':      // checkboxes
            case 'user_accounts_extrarow':
                $v = strval($v);
                if('' != $v && '1' != $v) continue;
                $isValid = true;
                break;
            case 'use_user_switcher':       // reset this checkbox to unselected
                $v = '';
                $isValid = true;
                break;

            case 'position_tb':             // static required selects
                $v = strval($v);
                if('top' != $v && 'bottom' != $v) continue;
                $isValid = true;
                break;
            case 'position_lr':
                $v = strval($v);
                if('left' != $v && 'right' != $v) continue;
                $isValid = true;
                break;
            case 'stacked':
                $v = strval($v);
                if('horizontal' != $v && 'vertical' != $v) continue;
                $isValid = true;
                break;
            case 'colorset':
                $v = strval($v);
                if(!in_array($v, array('skin1', 'skin2', 'skin3', 'skin4'))) continue;
                $isValid = true;
                break;

            case 'skin1_label':             // text names
            case 'skin2_label':
            case 'skin3_label':
            case 'skin4_label':
                $v = trim(strval(strip_tags($v)));
                $v = $this->sanitizer->text($v);
                if('' == $v) {
                    $v = substr($k, 0, 5);
                    $isValid = true;
                } else if(strlen($v) > 0 && strlen($v) < 42) {
                    $isValid = true;
                }
                break;

            case 'zindex':                  // integer
                $v = intval($v);
                if(0 >= $v) $v = self::$factorySettings['zindex'];
                $isValid = true;
                break;
            case 'uas_session_duration':
                $v = intval($v);
                if($v < 2 || $v > 60) $v = 2; // set a default of 2 minutes
                $isValid = true;
                break;

            case 'admin_ip':                  // IP adress
                if('' != $v && filter_var($this->data['admin_ip'], FILTER_VALIDATE_IP) === false) continue;
                $isValid = true;
                break;

            case 'position_tb_px':          // CSS values
            case 'position_lr_px':
                $v = trim(strval(strip_tags($v)));
                if('0' == $v || '' == $v) {
                    $v = '0';
                    $isValid = true;
                } else {
                    if(!preg_match('/(\d)(px|rem|%|em)/i', $v)) continue;
                    $isValid = true;
                }
                break;
        }
        return $isValid;
    }

    private function import_select_items($k) {
        $vData = $this->session->get('alifValidImportData');
        $newData = array();
        switch($k) {
            case 'skin1':        // colors skins
            case 'skin2':
            case 'skin3':
            case 'skin4':
                foreach(array('_bg_regular', '_bg_edit', '_bg_info', '_bg_warning', '_color', '_label') as $k2) {
                    $newData[$k . $k2] = $vData[$k . $k2];
                }
                break;

            case 'ual':
                $newData['use_advanced_links'] = $vData['use_advanced_links'];
                break;

            case 'uas':
                foreach(array('user_accounts_extrarow', 'use_user_switcher', 'user_accounts') as $k2) {
                    $newData[$k2] = $vData[$k2];
                }
                break;

            case 'pos':
                foreach(array('position_tb', 'position_lr', 'position_tb_px', 'position_lr_px', 'stacked', 'zindex', 'user_accounts_extrarow') as $k2) {
                    $newData[$k2] = $vData[$k2];
                }
                break;
        }
        return $newData;
    }



    // helpers
    private static function writeModuleConfigData($classname, &$data) {
        $logs = wire('config')->logs;                              // get current log status
        if(!is_array($logs) && !isset($logs['modules'])) {
            wire('modules')->saveModuleConfigData($classname, $data);
            return;
        }
        wire('config')->logs = array();                            // switch logging off
        wire('modules')->saveModuleConfigData($classname, $data);  // save config data
        wire('config')->logs = $logs;                              // toggle logging back to default
    }

    private static function sanitizeColor($value, $forGdColorallocate = false, $forAdjustments = false) {
        if(is_array($value) && (count($value) == 4 || count($value) == 3)) {
            $color = $value;
        } else if(is_int($value)) {
            $color = array($value, $value, $value);
        } else if(!is_string($value)) {
            // ERROR !!
            throw new wireException(__FUNCTION__ . " (A) wrong value given: $value !!");
            return false;
        } else {
            // test for common colornames
            static $common_colors = array('antiquewhite'=>'#FAEBD7','aqua'=>'#00FFFF','aquamarine'=>'#7FFFD4','beige'=>'#F5F5DC','black'=>'#000000','blue'=>'#0000FF','brown'=>'#A52A2A','cadetblue'=>'#5F9EA0','chocolate'=>'#D2691E','cornflowerblue'=>'#6495ED','crimson'=>'#DC143C','darkblue'=>'#00008B','darkgoldenrod'=>'#B8860B','darkgreen'=>'#006400','darkmagenta'=>'#8B008B','darkorange'=>'#FF8C00','darkred'=>'#8B0000','darkseagreen'=>'#8FBC8F','darkslategray'=>'#2F4F4F','darkviolet'=>'#9400D3','deepskyblue'=>'#00BFFF','dodgerblue'=>'#1E90FF','firebrick'=>'#B22222','forestgreen'=>'#228B22','fuchsia'=>'#FF00FF','gainsboro'=>'#DCDCDC','gold'=>'#FFD700','gray'=>'#808080','green'=>'#008000','greenyellow'=>'#ADFF2F','hotpink'=>'#FF69B4','indigo'=>'#4B0082','khaki'=>'#F0E68C','lavenderblush'=>'#FFF0F5','lemonchiffon'=>'#FFFACD','lightcoral'=>'#F08080','lightgoldenrodyellow'=>'#FAFAD2','lightgreen'=>'#90EE90','lightsalmon'=>'#FFA07A','lightskyblue'=>'#87CEFA','lightslategray'=>'#778899','lightyellow'=>'#FFFFE0','lime'=>'#00FF00','limegreen'=>'#32CD32','magenta'=>'#FF00FF','maroon'=>'#800000','mediumaquamarine'=>'#66CDAA','mediumorchid'=>'#BA55D3','mediumseagreen'=>'#3CB371','mediumspringgreen'=>'#00FA9A','mediumvioletred'=>'#C71585','mintcream'=>'#F5FFFA','moccasin'=>'#FFE4B5','navy'=>'#000080','olive'=>'#808000','orange'=>'#FFA500','orchid'=>'#DA70D6','palegreen'=>'#98FB98','palevioletred'=>'#D87093','peachpuff'=>'#FFDAB9','pink'=>'#FFC0CB','powderblue'=>'#B0E0E6','purple'=>'#800080','red'=>'#FF0000','royalblue'=>'#4169E1','salmon'=>'#FA8072','seagreen'=>'#2E8B57','sienna'=>'#A0522D','silver'=>'#C0C0C0','skyblue'=>'#87CEEB','slategray'=>'#708090','springgreen'=>'#00FF7F','tan'=>'#D2B48C','teal'=>'#008080','thistle'=>'#D8BFD8','turquoise'=>'#40E0D0','violetred'=>'#D02090','white'=>'#FFFFFF','yellow'=>'#FFFF00');
            if(isset($common_colors[strtolower($value)])) {
                $value = $common_colors[strtolower($value)];
            }
            // test for #HexColor
            if(preg_match('/^(#*[a-f0-9]{3}([a-f0-9]{3})?)$/i', $value)) {
                if(3 == strlen($value) || 6 == strlen($value)) $value = '#' . $value;
                if($value{0} == '#') { //case of #nnnnnn or #nnn
                    $c = strtoupper($value);
                    if(strlen($c) == 4) { // Turn #RGB into #RRGGBB
                        $c = "#" . $c{1} . $c{1} . $c{2} . $c{2} . $c{3} . $c{3};
                    }
                    $color = array();
                    $color[0] = hexdec(substr($c, 1, 2));
                    $color[1] = hexdec(substr($c, 3, 2));
                    $color[2] = hexdec(substr($c, 5, 2));
                }
            } else if(preg_match('/^([rgb|rgba]){1}\(\d(,\d){2-3}\))$/i', str_replace(' ', '', trim($value)))) { //case of RGB(r,g,b) or rgba(r,g,b,a)
                $value = str_replace(array('rgb', 'RGB', 'rgba', 'RGBA', '(', ')'), '', str_replace(' ', '', trim($value)));
                $c = explode(',', $value);
                $color = array($c[0], $c[1], $c[2]);
                if(isset($c[3])) $color[] = $c[3];
            } else {
                // ERROR !!
                throw new wireException(__FUNCTION__ . " (B) wrong value given: $value !!");
                return false;
            }
        }
        $min = $forAdjustments ? -255 : 0;
        $max = 255;
        $default = $forAdjustments ? 0 : 127;
        foreach(array(0, 1, 2) as $c) {
            $i = intval(trim($color[$c]));
            $color[$c] = $i >= $min && $i <= $max ? $i : $default;
        }
        if(isset($color[3])) {  // rgba, value for the alpha channel
            // we have a float like with css rgba, float 0 - 1 where 0 is transparent and 1 is opaque
            $color[3] = $color[3] >= 0 && $color[3] <= 1 ? $color[3] : 0.5;
            if($forGdColorallocate) {
                // convert css rgba alpha setting float 0-1 (transparent-opaque) scale to GDs ImagecolorAllocateAlpha 0-127 (opaque-transparent) scale
                $color[3] = intval((($color[3] * 127) - 127) * -1);
            }
        }

        return array($color[0], $color[1], $color[2]); // only rgb is supported here in ALIF, not rgba !!
    }

    private static function convertRgbColorToHex($rgb, $addHexChar = false) {
        if(!is_array($rgb)) return '';
        $hex = str_pad(dechex($rgb[0]), 2, '0', STR_PAD_LEFT);
        $hex .= str_pad(dechex($rgb[1]), 2, '0', STR_PAD_LEFT);
        $hex .= str_pad(dechex($rgb[2]), 2, '0', STR_PAD_LEFT);
        return $addHexChar ? '#' . $hex : $hex;
    }

    private function varDump($v) {
        ob_start();
        var_dump($v);
        $content = ob_get_contents();
        ob_end_clean();
        $m = 0;
        preg_match_all('#^(.*)=>#mU', $content, $stack);
        $lines = $stack[1];
        $indents = array_map('strlen', $lines);
        if($indents) $m = max($indents) + 1;
        $content = @preg_replace('#^(.*)=>\\n\s+(\S)#eUm', '"\\1" .str_repeat(" ", $m - strlen("\\1")>1 ? $m - strlen("\\1") : 1). "\\2"', $content);
        $content = preg_replace('#^((\s*).*){$#m', "\\1\n\\2{", $content);
        $content = str_replace(array('<pre>','</pre>'),'',$content);
        return $content;
    }

    private static $css = '
div#ALIFdimensionsDisplay, div#ALIFdimensionsDisplay a, div#ALIFdimensionsDisplay span, div#ALIFadminLinksContainer, div#ALIFadminLinksContainer a.ALIFadminlink, div#ALIFadminLinksContainer a.ALIFadminlink span {
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
        -ms-box-sizing: border-box;
            box-sizing: border-box;
    border: 0 none !important;
    margin: 0 !important;
    padding: 0 !important;
    vertical-align: middle !important;
    line-height: 22px !important;
    font-size: 14px !important;
    font-weight: 400 !important;
    text-decoration: none !important;
    font-family: Verdana, sans-serif !important;
}
div#ALIFadminLinksContainer {
    [_POSA_]: [_POSAPX_] !important;
    [_POSB_]: [_POSBPX_] !important;
    z-index: [_ZINDEX_] !important;
    position: fixed !important;
    margin: 0 !important;
    padding: 0 !important;
    min-width: 30px !important;
}
div#ALIFadminLinksContainer a.ALIFadminlink {
    display: inline-block !important;
    min-width: 30px !important;
    height: 30px !important;
    opacity: 0.5 !important;
    padding: 4px !important;
    text-align: left !important;
    background-position: 4px 4px !important;
    background-repeat: no-repeat !important;
    -webkit-transition: opacity 1s ease-in-out, content 2s linear, width 0.3s ease-in-out;
       -moz-transition: opacity 1s ease-in-out, content 2s linear, width 0.3s ease-in-out;
        -ms-transition: opacity 1s ease-in-out, content 2s linear, width 0.3s ease-in-out;
         -o-transition: opacity 1s ease-in-out, content 2s linear, width 0.3s ease-in-out;
            transition: opacity 1s ease-in-out, content 2s linear, width 0.3s ease-in-out;
}
div#ALIFadminLinksContainer a.ALIFadminlink:hover {opacity:1 !important; padding:4px 12px 4px 4px !important; min-width:120px !important}
div#ALIFadminLinksContainer a.ALIFadminlink span {padding-left:0 !important; content:"" !important}
div#ALIFadminLinksContainer a.ALIFadminlink:hover span {padding-left:27px !important;}
div#ALIFadminLinksContainer a.ALIFadminlink:hover span:after {vertical-align:top !important}

div#ALIFadminLinksContainer a#ALIFlogin {background-image: url("data:image/svg+xml;utf8,%3Csvg id=\'login\' xmlns=\'http%3A//www.w3.org/2000/svg\' x=\'0px\' y=\'0px\' width=\'22px\' height=\'22px\' viewBox=\'0 0 32 32\'%3E%3Cpath d=\'M 16 3 C 12.964103 3 10.415582 4.9657337 9.375 7.625 L 11.21875 8.375 C 11.978168 6.4342663 13.835897 5 16 5 C 18.754545 5 21 7.2454545 21 10 L 21 13 L 7 13 L 6 13 L 6 14 L 6 28 L 6 29 L 7 29 L 25 29 L 26 29 L 26 28 L 26 14 L 26 13 L 25 13 L 23 13 L 23 10 C 23 6.1545455 19.845455 3 16 3 z M 8 15 L 24 15 L 24 27 L 8 27 L 8 15 z\' style=\'fill%3Argb(255,255,255)\' %3E%3C/path%3E%3C/svg%3E");}
div#ALIFadminLinksContainer a#ALIFlogout {background-image: url("data:image/svg+xml;utf8,%3Csvg id=\'logout\' xmlns=\'http%3A//www.w3.org/2000/svg\' x=\'0px\' y=\'0px\' width=\'22px\' height=\'22px\' viewBox=\'0 0 32 32\'%3E%3Cpath d=\'M 16 3 C 12.154545 3 9 6.1545455 9 10 L 9 13 L 7 13 L 6 13 L 6 14 L 6 28 L 6 29 L 7 29 L 25 29 L 26 29 L 26 28 L 26 14 L 26 13 L 25 13 L 23 13 L 23 10 C 23 6.1545455 19.845455 3 16 3 z M 16 5 C 18.754545 5 21 7.2454545 21 10 L 21 13 L 11 13 L 11 10 C 11 7.2454545 13.245455 5 16 5 z M 8 15 L 24 15 L 24 27 L 8 27 L 8 15 z\' style=\'fill%3Argb(255,255,255)\' %3E%3C/path%3E%3C/svg%3E");}
div#ALIFadminLinksContainer a#ALIFadminpage {background-image: url("data:image/svg+xml;utf8,%3Csvg xmlns=\'http%3A//www.w3.org/2000/svg\' width=\'22px\' height=\'22px\' viewBox=\'0 0 379 379\'%3E %3Cg transform=\'matrix(1.25,0,0,-1.25,40,345)\' id=\'g10\'%3E %3Cg transform=\'scale(0.08,0.08)\' id=\'g12\'%3E %3Cpath id=\'path14\' style=\'fill%3Argb(255,255,255)\' d=\'m 1517.6,1767.02 c 138.62,0 251.01,-112.38 251.01,-251.02 0,-138.62 -112.39,-251.01 -251.01,-251.01 -138.64,0 -251.02,112.39 -251.02,251.01 0,138.64 112.38,251.02 251.02,251.02 z m -1.59,1264.99 C 679.137,3032.01 0.644531,2353.89 0.015625,1517.16 L 0,1517.16 0,749.051 388.961,403.559 l 0,1127.031 c 0,622.48 504.602,1127.06 1127.049,1127.06 622.45,0 1127.03,-504.58 1127.03,-1127.06 0,-622.41 -504.58,-1127.031 -1127.03,-1127.031 l -206.22,0 0,552.769 206.22,0 c 317.15,0 574.32,257.102 574.32,574.262 0,317.2 -257.17,574.32 -574.32,574.32 -317.16,0 -574.291,-257.12 -574.291,-574.32 L 941.719,0 1516.01,0 c 837.26,0 1516.01,678.73 1516.01,1515.99 0,837.28 -678.75,1516.02 -1516.01,1516.02\' /%3E %3C/g%3E %3C/g%3E %3C/svg%3E");}
div#ALIFadminLinksContainer a#ALIFeditpage {background-image: url("data:image/svg+xml;utf8,%3Csvg id=\'editpage\'  xmlns=\'http%3A//www.w3.org/2000/svg\' x=\'0px\' y=\'0px\' width=\'22px\' height=\'22px\' viewBox=\'0 0 32 32\'%3E%3Cpath d=\'M 23.90625 3.96875 C 22.859286 3.96875 21.813178 4.3743215 21 5.1875 L 5.40625 20.78125 L 5.1875 21 L 5.125 21.3125 L 4.03125 26.8125 L 3.71875 28.28125 L 5.1875 27.96875 L 10.6875 26.875 L 11 26.8125 L 11.21875 26.59375 L 26.8125 11 C 28.438857 9.373643 28.438857 6.813857 26.8125 5.1875 C 25.999322 4.3743215 24.953214 3.96875 23.90625 3.96875 z M 23.90625 5.875 C 24.409286 5.875 24.919428 6.1069285 25.40625 6.59375 C 26.379893 7.567393 26.379893 8.620107 25.40625 9.59375 L 24.6875 10.28125 L 21.71875 7.3125 L 22.40625 6.59375 C 22.893072 6.1069285 23.403214 5.875 23.90625 5.875 z M 20.3125 8.71875 L 23.28125 11.6875 L 11.1875 23.78125 C 10.533142 22.500659 9.4993415 21.466858 8.21875 20.8125 L 20.3125 8.71875 z M 6.9375 22.4375 C 8.1365842 22.923393 9.0766067 23.863416 9.5625 25.0625 L 6.28125 25.71875 L 6.9375 22.4375 z\' style=\'fill%3Argb(255,255,255)\' %3E%3C/path%3E%3C/svg%3E");}
div#ALIFadminLinksContainer a#ALIFdebugmode {background-image: url("data:image/svg+xml;utf8,%3Csvg id=\'debugmode\' xmlns=\'http%3A//www.w3.org/2000/svg\' x=\'0px\' y=\'0px\' width=\'22px\' height=\'22px\' viewBox=\'0 0 32 32\'%3E%3Cpath d=\'M 16 3 C 8.8321429 3 3 8.8321429 3 16 C 3 23.167857 8.8321429 29 16 29 C 23.167857 29 29 23.167857 29 16 C 29 8.8321429 23.167857 3 16 3 z M 16 5 C 22.086977 5 27 9.9130231 27 16 C 27 22.086977 22.086977 27 16 27 C 9.9130231 27 5 22.086977 5 16 C 5 9.9130231 9.9130231 5 16 5 z M 15 10 L 15 18 L 17 18 L 17 10 L 15 10 z M 15 20 L 15 22 L 17 22 L 17 20 L 15 20 z\' style=\'fill%3Argb(255,255,255)\' %3E%3C/path%3E%3C/svg%3E");}
div#ALIFadminLinksContainer a#ALIFimagesizerforcenew {background-image: url("data:image/svg+xml;utf8,%3Csvg id=\'imagesizerforcenew\' xmlns=\'http%3A//www.w3.org/2000/svg\' x=\'0px\' y=\'0px\' width=\'22px\' height=\'22px\' viewBox=\'0 0 32 32\'%3E%3Cpath d=\'M 6 3 L 6 4 L 6 28 L 6 29 L 7 29 L 25 29 L 26 29 L 26 28 L 26 10 L 26 9.59375 L 25.71875 9.28125 L 19.71875 3.28125 L 19.40625 3 L 19 3 L 7 3 L 6 3 z M 8 5 L 18 5 L 18 10 L 18 11 L 19 11 L 24 11 L 24 27 L 8 27 L 8 5 z M 20 6.4375 L 22.5625 9 L 20 9 L 20 6.4375 z M 21.09375 14 C 20.541466 14 20.09375 14.447715 20.09375 15 C 20.09375 15.552285 20.541466 16 21.09375 16 C 21.646035 16 22.09375 15.552285 22.09375 15 C 22.09375 14.447715 21.646035 14 21.09375 14 z M 14 15.59375 L 13.28125 16.28125 L 9.28125 20.28125 L 10.71875 21.71875 L 14 18.4375 L 16.28125 20.71875 L 17 21.40625 L 17.71875 20.71875 L 19 19.4375 L 21.28125 21.71875 L 22.71875 20.28125 L 19.71875 17.28125 L 19 16.59375 L 18.28125 17.28125 L 17 18.5625 L 14.71875 16.28125 L 14 15.59375 z\' style=\'fill%3Argb(255,255,255)\' %3E%3C/path%3E%3C/svg%3E");}
div#ALIFadminLinksContainer a#ALIFdestroy {background-image: url("data:image/svg+xml;utf8,%3Csvg id=\'destroy\' xmlns=\'http%3A//www.w3.org/2000/svg\' x=\'0px\' y=\'0px\' width=\'22px\' height=\'22px\' viewBox=\'0 0 32 32\'%3E%3Cpath d=\'M 15 4 C 14.477778 4 13.939531 4.1854695 13.5625 4.5625 C 13.185469 4.9395305 13 5.4777778 13 6 L 13 7 L 7 7 L 7 9 L 8 9 L 8 25 C 8 26.645455 9.3545455 28 11 28 L 23 28 C 24.645455 28 26 26.645455 26 25 L 26 9 L 27 9 L 27 7 L 21 7 L 21 6 C 21 5.4777778 20.814531 4.9395305 20.4375 4.5625 C 20.060469 4.1854695 19.522222 4 19 4 L 15 4 z M 15 6 L 19 6 L 19 7 L 15 7 L 15 6 z M 10 9 L 24 9 L 24 25 C 24 25.554545 23.554545 26 23 26 L 11 26 C 10.445455 26 10 25.554545 10 25 L 10 9 z M 12 12 L 12 23 L 14 23 L 14 12 L 12 12 z M 16 12 L 16 23 L 18 23 L 18 12 L 16 12 z M 20 12 L 20 23 L 22 23 L 22 12 L 20 12 z\' style=\'fill%3Argb(255,255,255)\' %3E%3C/path%3E%3C/svg%3E");}
div#ALIFadminLinksContainer a#ALIFsettings {background-image: url("data:image/svg+xml;utf8,%3Csvg id=\'settings\' xmlns=\'http%3A//www.w3.org/2000/svg\' x=\'0px\' y=\'0px\' width=\'22px\' height=\'22px\' viewBox=\'0 0 32 32\'%3E%3Cpath d=\'M 21 3 C 16.570085 3 13 6.5700855 13 11 C 13 11.234522 13.03701 11.552859 13.0625 11.84375 L 4.5 20.40625 C 2.5317152 22.374535 2.5317152 25.531715 4.5 27.5 C 6.4682848 29.468285 9.6254652 29.468285 11.59375 27.5 L 20.15625 18.9375 C 20.447141 18.962993 20.765478 19 21 19 C 25.429915 19 29 15.429915 29 11 C 29 9.6333333 28.648022 8.3664396 28.0625 7.3125 L 27.4375 6.15625 L 26.5 7.09375 L 22.1875 11.375 L 20.625 9.8125 L 24.90625 5.5 L 25.84375 4.5625 L 24.6875 3.9375 C 23.63356 3.351978 22.366667 3 21 3 z M 21 5 C 21.485935 5 21.848238 5.208554 22.28125 5.3125 L 18.5 9.09375 L 17.78125 9.8125 L 18.5 10.5 L 21.5 13.5 L 22.1875 14.21875 L 22.90625 13.5 L 26.6875 9.71875 C 26.791446 10.151762 27 10.514065 27 11 C 27 14.370085 24.370085 17 21 17 C 20.6 17 20.279071 16.999455 20.03125 16.9375 L 19.5 16.78125 L 19.09375 17.1875 L 10.1875 26.09375 C 8.9557848 27.325465 7.1379652 27.325465 5.90625 26.09375 L 5.875 26.0625 C 4.6754069 24.831406 4.6853049 23.033445 5.90625 21.8125 L 14.8125 12.90625 L 15.21875 12.5 L 15.0625 11.96875 C 15.000545 11.720929 15 11.4 15 11 C 15 7.6299145 17.629915 5 21 5 z\' style=\'fill%3Argb(255,255,255)\' %3E%3C/path%3E%3C/svg%3E");}
div#ALIFadminLinksContainer a#ALIFaov {background-image: url("data:image/svg+xml;utf8,%3Csvg id=\'aov\' xmlns=\'http%3A//www.w3.org/2000/svg\' x=\'0px\' y=\'0px\' width=\'22px\' height=\'22px\' viewBox=\'0 0 32 32\'%3E%3Cpath d=\'M 12.3125 4.53125 L 10.46875 5.28125 L 11.625 8.15625 C 10.172045 8.9708031 8.9708031 10.172045 8.15625 11.625 L 5.28125 10.46875 L 4.53125 12.3125 L 7.375 13.46875 C 7.1404613 14.269509 7 15.124932 7 16 C 7 16.875068 7.1404613 17.730491 7.375 18.53125 L 4.53125 19.6875 L 5.28125 21.53125 L 8.15625 20.375 C 8.9692617 21.825206 10.179164 23.02705 11.625 23.84375 L 10.46875 26.71875 L 12.3125 27.46875 L 13.46875 24.625 C 14.269784 24.861394 15.122974 25 16 25 C 16.875068 25 17.730491 24.859539 18.53125 24.625 L 19.6875 27.46875 L 21.53125 26.71875 L 20.375 23.84375 C 21.827955 23.029197 23.029197 21.827955 23.84375 20.375 L 26.71875 21.53125 L 27.46875 19.6875 L 24.625 18.53125 C 24.859539 17.730491 25 16.875068 25 16 C 25 15.124932 24.859539 14.269509 24.625 13.46875 L 27.46875 12.3125 L 26.71875 10.46875 L 23.84375 11.625 C 23.029197 10.172045 21.827955 8.9708031 20.375 8.15625 L 21.53125 5.28125 L 19.6875 4.53125 L 18.53125 7.375 C 17.730491 7.1404613 16.875068 7 16 7 C 15.124932 7 14.269509 7.1404613 13.46875 7.375 L 12.3125 4.53125 z M 16 9 C 19.877838 9 23 12.122162 23 16 C 23 19.877838 19.877838 23 16 23 C 12.122162 23 9 19.877838 9 16 C 9 12.122162 12.122162 9 16 9 z M 16 12 C 13.802706 12 12 13.802706 12 16 C 12 18.197294 13.802706 20 16 20 C 18.197294 20 20 18.197294 20 16 C 20 13.802706 18.197294 12 16 12 z M 16 14 C 17.116414 14 18 14.883586 18 16 C 18 17.116414 17.116414 18 16 18 C 14.883586 18 14 17.116414 14 16 C 14 14.883586 14.883586 14 16 14 z\' style=\'fill%3Argb(255,255,255)\' %3E%3C/path%3E%3C/svg%3E");}
div#ALIFadminLinksContainer a#ALIFdimensionsButton {background-image: url("data:image/svg+xml;utf8,%3Csvg id=\'aov\' xmlns=\'http%3A//www.w3.org/2000/svg\' x=\'0px\' y=\'0px\' width=\'22px\' height=\'22px\' viewBox=\'0 0 32 32\'%3E%3Cpath d=\'M 16 3 C 8.8321429 3 3 8.8321429 3 16 C 3 23.167857 8.8321429 29 16 29 C 23.167857 29 29 23.167857 29 16 C 29 8.8321429 23.167857 3 16 3 z M 16 5 C 22.086977 5 27 9.9130231 27 16 C 27 22.086977 22.086977 27 16 27 C 9.9130231 27 5 22.086977 5 16 C 5 9.9130231 9.9130231 5 16 5 z M 15 10 L 15 12 L 17 12 L 17 10 L 15 10 z M 15 14 L 15 22 L 17 22 L 17 14 L 15 14 z\' style=\'fill%3Argb(255,255,255)\' %3E%3C/path%3E%3C/svg%3E");}

div#ALIFadminLinksContainer a#ALIFlogin:hover span:after {content:"Login"}
div#ALIFadminLinksContainer a#ALIFlogout:hover span:after {content:"Logout"}
div#ALIFadminLinksContainer a#ALIFadminpage:hover span:after {content:"Admin"}
div#ALIFadminLinksContainer a#ALIFeditpage:hover span:after {content:"Edit"}
div#ALIFadminLinksContainer a#ALIFdebugmode:hover span:after {content:"Debugmode"}
div#ALIFadminLinksContainer a#ALIFimagesizerforcenew:hover span:after {content:"ForceNew!"}
div#ALIFadminLinksContainer a#ALIFdestroy:hover span:after {content:"Session"}
div#ALIFadminLinksContainer a#ALIFsettings:hover span:after {content:"Settings"}
div#ALIFadminLinksContainer a#ALIFaov:hover span:after {content:"AccessView"}
div#ALIFadminLinksContainer a#ALIFdimensionsButton:hover span:after {content:"Dimensions"}

div#ALIFadminLinksContainer.horizontal a.ALIFadminlink:hover {min-width:150px !important}
div#ALIFadminLinksContainer.horizontal br.horizontal {clear:both !important}
div#ALIFadminLinksContainer.horizontal br.vertical {display:none !important}
div#ALIFadminLinksContainer.horizontal.right a.ALIFadminlink {float:right}

div#ALIFadminLinksContainer.vertical br.horizontal {display:none !important}
div#ALIFadminLinksContainer.vertical.right a.ALIFadminlink {background-position: right 4px !important; border-right:4px solid transparent !important;}
div#ALIFadminLinksContainer.vertical.right {text-align: right !important;}
div#ALIFadminLinksContainer.vertical.right a.ALIFadminlink {text-align: right !important;}
div#ALIFadminLinksContainer.vertical.right a.ALIFadminlink span {text-align: right !important;}
div#ALIFadminLinksContainer.vertical.right a.ALIFadminlink:hover span {padding-right:23px !important; padding-left:4px !important;}
div#ALIFadminLinksContainer.vertical.right a.ALIFadminlink span {padding-left:0 !important; content:"" !important}

div#ALIFadminLinksContainer a.ALIFadminLinksColor, div#ALIFadminLinksContainer a.ALIFadminLinksColor span {color:_color !important}
div#ALIFadminLinksContainer a.ALIFadminLinksBgColorRegular {background-color:_bg_regular !important}
div#ALIFadminLinksContainer a.ALIFadminLinksBgColorEdit {background-color:_bg_edit !important}
div#ALIFadminLinksContainer a.ALIFadminLinksBgColorInfo {background-color:_bg_info !important}
div#ALIFadminLinksContainer a.ALIFadminLinksBgColorWarning {background-color:_bg_warning !important}
div#ALIFadminLinksContainer a.ALIFadminLinksBgColorUser {background-color:_bg_regular !important}
div#ALIFadminLinksContainer a.ALIFadminLinksBgColorUser.PwActiveUser {background-color:_bg_info !important}
div#ALIFdimensionsDisplay, div#ALIFdimensionsDisplay div#ALIFdimensionsDisplayInner {
    padding: 0 !important;
    color:_color !important;
    background-color:_bg_regular !important;
    opacity:1;
    vertical-align: top !important;
    line-height: 18px !important;
    font-size: 11px !important;
    font-weight: 400 !important;
    text-decoration: none !important;
    font-family: Verdana, sans-serif !important;
}
div#ALIFdimensionsDisplay {
    position:fixed;
    top:[_POSCPX_];
    left:[_POSDPX_];
    z-index:[_ZINDEX2_];
    display:none;
    min-width:260px;
    min-height:70px;
    border: 0 none !important;
    background-color:_bg_info !important;
}
div#ALIFdimensionsDisplay div#ALIFdimensionsDisplayInner {padding:5px 10px 5px 10px !important; border:2px solid _bg_info !important}
div#ALIFdimensionsDisplay div#ALIFdimensionsDisplayInner span {font-size:13px !important; font-weight:700 !important; padding-left:3px !important}
div#ALIFdimensionsDisplay div#ALIFdimensionsDisplayInner hr {line-height:4px !important; font-size:4px !important; margin:4px 0 2px 0 !important; padding:0 !important; border:1px solid _color !important; opacity:0.5 !important}
div#ALIFdimensionsDisplay a.ALIFddSwitcher {
    display:inline-block !important;
    width:33% !important;
    padding:2px !important;
    background-color:_bg_info !important;
    color:_color !important;
    line-height: 14px !important;
    font-size: 11px !important;
    font-weight: 700 !important;
    text-align: center !important;
    opacity:0.8;
}
div#ALIFdimensionsDisplay a.ALIFddSwitcher:hover {cursor:pointer}
';

    private function lang($item) {
        $a = array(
            11 => $this->_('Position of the Toolbar'),
            12 => $this->_('Define the Toolbar position with CSS attributes: 100px | 10% | 1rem | ...'),
            13 => $this->_('TOP or BOTTOM'),
            14 => $this->_('value for Top | Bottom'),
            15 => $this->_('LEFT or RIGHT'),
            16 => $this->_('value for Left | Right'),
            17 => $this->_('Stack the Buttons'),
            18 => $this->_('Select a Colorset'),
            19 => $this->_('Colorsets'),
            20 => $this->_('Define up to 4 colorsets. Enter color values as HEX, without the #.'),
            21 => $this->_('Login'),
            22 => $this->_('Logout'),
            23 => $this->_('Admin'),
            24 => $this->_('Edit'),
            25 => $this->_('Debugmode'),
            26 => $this->_('ForceNew!'),
            27 => $this->_('Settings'),
            28 => $this->_('Available Buttons'),
            29 => $this->_('Select all buttons that, conditionally, should be displayed'),
            30 => $this->_('CSS z-index'),
            31 => $this->_('Change the name for this colorset'),
            32 => $this->_('Hexadecimal color values like #000 or #FFFFFF, but without the #'),
            33 => $this->_('Example: 000 or FFFFFF or EE37A5 !!'),
            34 => $this->_('Import / Export'),
            35 => $this->_('Open field to import encoded data'),
            36 => $this->_('Show encoded Exportdata'),
            37 => $this->_('Importdata'),
            38 => $this->_('Paste in the complete encoded data from another installation and submit the form to import it!'),
            39 => $this->_('Exportdata'),
            40 => $this->_('Select all data and copy / paste it into another installations importfield of ALIF.'),
            41 => $this->_('Login Button and User Account Switcher'),
            42 => $this->_('Enable Loginbutton'),
            43 => $this->_('This will set a Sessionflag and displays a Loginbutton and optionally Infobuttons after you have logged out!'),
            44 => $this->_('Enable User Account Switcher'),
            45 => $this->_('This will display a button for each selected user. You can simply login with their accounts just by clicking the buttons, without leaving the current page.'),
            46 => sprintf($this->_('Available for Superusers with permission %s only!'), self::$alifPermission),
            47 => $this->_('Select users'),
            48 => $this->_('Select users for the UserAccountSwitcher container'),
            49 => $this->_('Extra Row'),
            50 => $this->_('Stack Userbuttons in an own row'),
            51 => $this->_('Applies only when displayed horizontal'),
            52 => $this->_('Start an UAS session'),
            53 => $this->_('Check this box and send the form to start an UAS session'),
            54 => $this->_('Available Toolbar Buttons'),
            55 => $this->_('Session time to live'),
            56 => $this->_('Minutes, min 2 and max 60'),
            57 => $this->_('Admin IP'),
            58 => sprintf($this->_('Bind the session to your IP, %s ?'), (isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '')),
            59 => $this->_('Leave empty if you use a fast changing dynamic IP!'),
            60 => $this->_('Configure and start the fast User Account Switcher'),
            61 => $this->_('Import Data Wizzard Step 2'),
            62 => $this->_('62'),
            63 => $this->_('ATTENTION: Importing Data has failed!'),
            64 => $this->_('IMPORT FAILURE'),
            65 => $this->_('Dimensions Custom ID'),
            66 => $this->_('Optionally define a HTML container ID to inspect its dimensions'),
            67 => $this->_('Sanitized ImportData'),
            68 => $this->_('The sanitized Importdata looks as follows:'),
            69 => $this->_('Check to select Items for the Import'),
            70 => $this->_('Select all of the following items you want and submit the form to proceed the Import'),
            71 => $this->_('Colorset '),
            72 => $this->_('Check if you want import this colorset'),
            73 => $this->_('Menu Position'),
            74 => $this->_('Check if you want import the Position Values'),
            75 => $this->_('Advanced Links'),
            76 => $this->_('Check if you want to import this setting'),
            77 => $this->_('User Account Switcher'),
            78 => $this->_('Check if you want to import settings for the User Account Switcher'),
            79 => $this->_('Use One-Click User Switch Toolbar'),
            80 => $this->_('How to inject the links into your frontpage'),
            81 => $this->_('To display the link container in your frontpage, you add code into a template file, similar to:'),
            82 => $this->_('echo $modules->isInstalled("AdminLinksInFrontend") ? $modules->get("AdminLinksInFrontend")->render() : "";'),
//            83 => $this->_('83'),
//            84 => $this->_('84'),
//            85 => $this->_('85'),
//            86 => $this->_('86'),
//            87 => $this->_('87'),
//            88 => $this->_('88'),
//            89 => $this->_('89'),
        );
        return isset($a[(int)$item]) ? $a[(int)$item] : '';
    }

    private function colorSkinFormFields($skin, $colors) {
        $skinLabel = $colors['_label'];
        $fieldset = $this->modules->get('InputfieldFieldset');
        $fieldset->attr('name', $skin);
        $fieldset->label = htmlentities($skinLabel);
        $fieldset->collapsed = Inputfield::collapsedYes;
        $Textfield = $this->modules->get('InputfieldText');
        $Textfield->name = $skin . '_label';
        $Textfield->label = 'colorset name';
        $Textfield->value = $skinLabel;
        $Textfield->attr('maxlength', 32);
        $Textfield->attr('length', 32);
        $Textfield->columnWidth = 50;
        $Textfield->required = true;
        array_shift($colors);
        foreach($colors as $k => $v) {
            $field = $this->modules->get('InputfieldText');
            $field->attr('name+id', $skin . $k);
            $field->label = str_replace(array('_bg_', '_color'), array('bgcolor ', 'text color'), $k);
            $field->value = self::convertRgbColorToHex(self::sanitizeColor($v));
            $field->attr('class', 'jscolor');
            $field->attr('maxlength', 7);
            $field->attr('length', 7);
            $field->columnWidth = '_color' == $k ? 50 : 25;
            $field->required = true;
            $fieldset->add($field);
        }
        $fieldset->add($Textfield);
        return $fieldset;
    }

    private function getForm() {

        // append the JS color selector on ConfigPage
        if(0 == $this->session->get('alifDataImportStep')) {
            $jsUrl = $this->config->urls->AdminLinksInFrontend . 'jscolor.js';
            $this->config->scripts->append($jsUrl);
        }


        // get data and build form
        $dataImport = $this->session->get('alifDataImport');
        $dataImportStep = $this->session->get('alifDataImportStep');
        $data = $this->data;
        foreach(array('skin1', 'skin2', 'skin3', 'skin4') as $key) {
            $skin = array();
            foreach(array('_label', '_bg_regular', '_bg_edit', '_bg_info', '_bg_warning', '_color') as $attribute) {
                $skin[$attribute] = $data[$key . $attribute];
            }
            $this->skins[$key] = $skin;
        }
        $form = new InputfieldWrapper();


        // we have had a successfull first step to import data, display form for second step
        if(1 === $dataImportStep && true === $dataImport) {
            $fieldset = $this->modules->get('InputfieldFieldset');
            $fieldset->attr('name+id', 'importwizzard2');
            $fieldset->label = $this->lang(61);
            #$fieldset->description = $this->lang(66);
            $fieldset->collapsed = Inputfield::collapsedNo;
                $field = $this->modules->get('InputfieldMarkup');
                $field->attr('name+id', 'importwizzard2');
                $field->label = $this->lang(67);
                $field->collapsed = Inputfield::collapsedNo;
                $a = $this->session->get('alifValidImportData');
                $markup = $this->varDump($a);
                foreach(array('skin1_', 'skin2_', 'skin3_', 'skin4_') as $sk) {
                    $c = '#' . $a[$sk . 'color'];
                    foreach(array('bg_regular', 'bg_edit', 'bg_info', 'bg_warning') as $bg) {
                        $bgc = $a[$sk . $bg];
                        $pattern = "#(\[\"{$sk}{$bg}\"\].*?)(string\(6\) \"{$bgc}\")#i";
                        $markup = preg_replace($pattern, "<span style=\"color:$c;background-color:#$bgc\">$1$2</span>", $markup);
                    }
                }
                $field->attr('value', "<p><strong>" . $this->lang(68) . "</strong></p><pre>\n{$markup}\n</pre>");
                unset($markup, $a, $c, $sk, $bg, $bgc);
                $field->columnWidth = 100;
                $fieldset->add($field);

                $field = $this->modules->get('InputfieldHidden');
                $field->attr('name+id', 'import_proceed_aborted');
                $field->attr('value', 1);
                $fieldset->add($field);

                $field = $this->modules->get('InputfieldCheckbox');
                $field->attr('name+id', 'import_proceed');
                $field->label = $this->lang(69);
                $field->description = $this->lang(70);
                $field->attr('value', 1);
                $field->attr('checked', '');
                $field->columnWidth = 100;
                $fieldset->add($field);

                $i = 71;
                foreach(array('skin1', 'skin2', 'skin3', 'skin4') as $s) {
                    $field = $this->modules->get('InputfieldCheckbox');
                    $field->attr('name+id', 'import_item_' . $s);
                    $field->label = $this->lang($i) . " $s";
                    $field->description = $this->lang($i + 1);
                    $field->attr('value', 1);
                    $field->attr('checked', '');
                    $field->showIf = 'import_proceed=1';
                    $field->columnWidth = 25;
                    $fieldset->add($field);
                }
                $i = 73;
                foreach(array('pos', 'ual', 'uas') as $s) {
                    $field = $this->modules->get('InputfieldCheckbox');
                    $field->attr('name+id', 'import_item_' . $s);
                    $field->label = $this->lang($i++);
                    $field->description = $this->lang($i++);
                    $field->attr('value', 1);
                    $field->attr('checked', '');
                    $field->showIf = 'import_proceed=1';
                    $field->columnWidth = 'uas' == $s ? 34 : 33;
                    $fieldset->add($field);
                }
            $form->add($fieldset);
            return $form;
        }


        // we have had an attempt to import data that has failed, display a message
        if(1 === $dataImportStep && false === $dataImport) {
            $fieldset = $this->modules->get('InputfieldFieldset');
            $fieldset->attr('name+id', 'importwizzard2');
            $fieldset->label = $this->lang(61);
            #$fieldset->description = $this->lang(62);
            $fieldset->collapsed = Inputfield::collapsedNo;
                $field = $this->modules->get('InputfieldMarkup');
                $field->attr('name+id', 'importwizzard2');
                $field->label = $this->lang(64);
                $field->collapsed = Inputfield::collapsedNo;
                $field->attr('value', $this->lang(63));
                $field->columnWidth = 100;
                $fieldset->add($field);
            $form->add($fieldset);
            // import related reset
            $this->session->remove('alifDataImport');
            $this->session->remove('alifDataImportStep');
            $this->session->remove('alifBackupData');
            $this->session->remove('alifValidImportData');
        }

        // information
        $field = $this->modules->get('InputfieldMarkup');
        $field->attr('name+id', 'template_code_info');
        $field->label = $this->lang(80);
        $field->collapsed = Inputfield::collapsedNo;
        $field->attr('value', "<p>" . $this->lang(81) . "</p><code><strong>" . $this->lang(82) . "</strong></code>");
        $field->columnWidth = 100;
        $form->add($field);

        // position, direction, colorselect
        $fieldset = $this->modules->get('InputfieldFieldset');
        $fieldset->attr('name+id', 'position_of_toolbar');
        $fieldset->label = $this->lang(11);
        $fieldset->description = $this->lang(12);
        $fieldset->columnWidth = 63;
        $fieldset->collapsed = Inputfield::collapsedNo;
            $field = $this->modules->get('InputfieldSelect');
            $field->attr('name+id', 'position_tb');
            $field->label = $this->lang(13);
            $field->addOptions(array(
                'top' => 'top',
                'bottom' => 'bottom'
            ));
            if(isset($data[$field->name])) $field->value = $data[$field->name];
            $field->columnWidth = 50;
            $field->required = true;
            $fieldset->add($field);

            $field = $this->modules->get('InputfieldText');
            $field->attr('name+id', 'position_tb_px');
            $field->label = $this->lang(14);
            if(isset($data[$field->name])) $field->value = $data[$field->name];
            $field->attr('maxlength', 12);
            $field->attr('length', 12);
            $field->columnWidth = 50;
            $field->required = true;
            $fieldset->add($field);

            $field = $this->modules->get('InputfieldSelect');
            $field->attr('name+id', 'position_lr');
            $field->label = $this->lang(15);
            $field->addOptions(array(
                'left' => 'left',
                'right' => 'right'
            ));
            if(isset($data[$field->name])) $field->value = $data[$field->name];
            $field->columnWidth = 50;
            $field->required = true;
            $fieldset->add($field);

            $field = $this->modules->get('InputfieldText');
            $field->attr('name+id', 'position_lr_px');
            $field->label = $this->lang(16);
            if(isset($data[$field->name])) $field->value = $data[$field->name];
            $field->attr('maxlength', 12);
            $field->attr('length', 12);
            $field->columnWidth = 50;
            $field->required = true;
            $fieldset->add($field);

            $field = $this->modules->get('InputfieldSelect');
            $field->attr('name+id', 'stacked');
            $field->label = $this->lang(17);
            $field->addOptions(array(
                'horizontal' => 'horizontal',
                'vertical' => 'vertical'
            ));
            if(isset($data[$field->name])) $field->value = $data[$field->name];
            $field->columnWidth = 50;
            $field->required = true;
            $fieldset->add($field);

            $field = $this->modules->get('InputfieldInteger');
            $field->attr('name+id', 'zindex');
            $field->label = $this->lang(30);
            if(isset($data[$field->name])) $field->value = $data[$field->name];
            $field->columnWidth = 50;
            $field->required = true;
            $fieldset->add($field);

            $field = $this->modules->get('InputfieldSelect');
            $field->attr('name+id', 'colorset');
            $field->label = $this->lang(18);
            $skinNames = array();
            foreach(array_keys($this->skins) as $key) $skinNames[$key] = $this->skins[$key]['_label'];
            $field->addOptions($skinNames);
            if(isset($data[$field->name])) $field->value = $data[$field->name];
            $field->columnWidth = 100;
            $field->required = true;
            $fieldset->add($field);
        $form->add($fieldset);

        $fieldset = $this->modules->get('InputfieldFieldset');
        $fieldset->attr('name+id', 'available_buttons');
        $fieldset->label = $this->lang(54);
        $fieldset->description = $this->lang(29);
        $fieldset->columnWidth = 37;
        $fieldset->collapsed = Inputfield::collapsedNo;
            $field = $this->modules->get('InputfieldAsmSelect');
            $field->attr('name+id', 'buttons_enabled');
            $field->label = $this->lang(28);
            $field->setAsmSelectOption('sortable', false);
            foreach(self::$buttons as $k => $v) $field->addOption($k, $v);
            if(isset($data[$field->name])) $field->value = $data[$field->name];
            $field->columnWidth = 100;
            $fieldset->add($field);

            $field = $this->modules->get('InputfieldText');
            $field->attr('name+id', 'cccID');
            $field->label = $this->lang(65);
            $field->description = $this->lang(66);
            if(isset($data[$field->name])) $field->value = $data[$field->name];
            $field->attr('maxlength', 64);
            $field->attr('length', 64);
            $field->columnWidth = 100;
            $fieldset->add($field);
        $form->add($fieldset);


        if(version_compare(self::$pwv, self::$pwvShowIf, '>=')) {
            // Import / Export
            $fieldset = $this->modules->get('InputfieldFieldset');
            $fieldset->attr('name+id', 'importexport');
            $fieldset->label = $this->lang(34);
            $fieldset->collapsed = Inputfield::collapsedYes;
                $field = $this->modules->get('InputfieldCheckbox');
                $field->attr('name+id', 'import_enabled');
                $field->label = $this->lang(35);
                $field->showIf = 'export_enabled=0';
                $field->attr('value', 1);
                $field->columnWidth = 100;
                $fieldset->add($field);

                $field = $this->modules->get('InputfieldCheckbox');
                $field->attr('name+id', 'export_enabled');
                $field->label = $this->lang(36);
                $field->showIf = 'import_enabled=0';
                $field->attr('value', 1);
                $field->columnWidth = 100;
                $fieldset->add($field);

                $field = $this->modules->get('InputfieldTextarea');
                $field->attr('name+id', 'data_import');
                $field->label = $this->lang(37);
                $field->description = $this->lang(38);
                $field->attr('rows', 15);
                $field->showIf = 'import_enabled=1';
                $field->columnWidth = 100;
                $fieldset->add($field);

                $field = $this->modules->get('InputfieldTextarea');
                $field->attr('name+id', 'data_export');
                $field->label = $this->lang(39);
                $field->description = $this->lang(40);
                $field->showIf = 'export_enabled=1';
                $field->value = serialize($data);
                $field->attr('rows', 15);
                $field->columnWidth = 100;
                $fieldset->add($field);
            $form->add($fieldset);
        }

        // advanced settings, UAS
        $fieldset = $this->modules->get('InputfieldFieldset');
        $fieldset->attr('name+id', 'advancedsetup');
        $fieldset->label = $this->lang(41);
        $fieldset->collapsed = Inputfield::collapsedYes;
            $field = $this->modules->get('InputfieldCheckbox');
            $field->attr('name+id', 'use_advanced_links');
            $field->label = $this->lang(42);
            $field->description = $this->lang(43);
            $field->attr('value', 1);
            $field->attr('checked', $data[$field->name] ? 'checked' : '');
            $field->columnWidth = 100;
            $fieldset->add($field);

            // check if we can use $session->forceLogin($user) or not
            if(version_compare($this->config->version, self::$pwvUAS, '>=')) {
                $fieldset2 = $this->modules->get('InputfieldFieldset');
                $fieldset2->attr('name+id', 'advancedsetupuas');
                $fieldset2->label = $this->lang(60);
                $fieldset2->collapsed = Inputfield::collapsedNo;

                $field = $this->modules->get('InputfieldCheckbox');
                $field->attr('name+id', 'use_user_switcher');
                $field->label = $this->lang(44);
                $field->description = $this->lang(45);
                $field->notes = $this->lang(46);
                $field->attr('value', 1);
                $field->attr('checked', $data[$field->name] ? 'checked' : '');
                if(!$this->uas_isValidSuperuser()) $field->attr('disabled', 'disabled');
                if(!$this->uas_isValidSuperuser()) $field->attr('readonly', 'readonly');
                $field->columnWidth = 33;
                $fieldset2->add($field);

                if($this->uas_isValidSuperuser()) {
                    $field = $this->modules->get('InputfieldAsmSelect');
                    $field->attr('name+id', 'user_accounts');
                    $field->label = $this->lang(47);
                    $field->description = $this->lang(48);
                    $field->showIf = 'use_user_switcher=1';
                    $field->setAsmSelectOption('sortable', true);
                    foreach($this->users as $u) $field->addOption($u->name);
                    if(isset($data[$field->name])) $field->value = $data[$field->name];
                    $field->columnWidth = 34;
                    $fieldset2->add($field);

                    $field = $this->modules->get('InputfieldCheckbox');
                    $field->attr('name+id', 'user_accounts_extrarow');
                    $field->label = $this->lang(49);
                    $field->description = $this->lang(50);
                    $field->notes = $this->lang(51);
                    $field->showIf = 'use_user_switcher=1';
                    $field->attr('value', 1);
                    $field->attr('checked', $data[$field->name] ? 'checked' : '');
                    $field->columnWidth = 33;
                    $fieldset2->add($field);
                }

                // security settings for UAS Sessions
                if($this->uas_isValidSuperuser()) {
                    // start session checkbox: start_uas_session
                    $field = $this->modules->get('InputfieldCheckbox');
                    $field->attr('name+id', 'start_uas_session');
                    $field->label = $this->lang(52);
                    $field->description = $this->lang(53);
                    $field->showIf = 'use_user_switcher=1';
                    $field->attr('value', 1);
                    $field->attr('checked', '');
                    $field->columnWidth = 33;
                    $fieldset2->add($field);

                    // max minutes to live: uas_session_duration
                    $field = $this->modules->get('InputfieldInteger');
                    $field->attr('name+id', 'uas_session_duration');
                    $field->label = $this->lang(55);
                    $field->description = $this->lang(56);
                    $field->showIf = 'use_user_switcher=1';
                    if(isset($data[$field->name])) $field->value = $data[$field->name];
                    $field->columnWidth = 34;
                    $fieldset2->add($field);

                    // bind session to: admin_ip
                    $field = $this->modules->get('InputfieldText');
                    $field->attr('name+id', 'admin_ip');
                    $field->label = $this->lang(57);
                    $field->description = $this->lang(58);
                    $field->notes = $this->lang(59);
                    $field->showIf = 'use_user_switcher=1';
                    if(isset($data[$field->name])) $field->value = $data[$field->name];
                    $field->attr('maxlength', 15);
                    $field->attr('length', 15);
                    $field->columnWidth = 33;
                    $fieldset2->add($field);
                }
                $fieldset->add($fieldset2);
            }
        $form->add($fieldset);


        // Colorsets
        $fieldset = $this->modules->get('InputfieldFieldset');
        $fieldset->attr('name+id', 'colorskins');
        $fieldset->label = $this->lang(19);
        $fieldset->description = $this->lang(20);
        $fieldset->notes = $this->lang(32) . " || " . $this->lang(33);
        $fieldset->collapsed = Inputfield::collapsedYes;
        foreach($this->skins as $key => $skin) {
            $fieldset2 = $this->colorSkinFormFields($key, $skin);
            $fieldset->add($fieldset2);
        }
        $form->add($fieldset);


        return $form;
    }

    private function renderDimensionsDisplay() {
        $customContentContainerID = isset($this->data['cccID']) ? trim($this->data['cccID']) : '';
        return "\n<script type='text/javascript'>
    var ALIFcontainerID='{$customContentContainerID}', ALIFcd=null, ALIFdd=null, ALIFtimerID=null, ALIFshowDimensions=null, ALIFdimensionsToggle=null;
    var ALIFddOffset=true, ALIFddClient=true, ALIFddScroll=true;
    var ALIFstartDimensions = function() {
        var div = document.createElement('div');
        div.id = 'ALIFdimensionsDisplay';
        document.body.appendChild(div);
        var A = document.createElement('a'); A.classList.add('ALIFddSwitcher'); A.id = 'ALIFDDoffset'; A.innerHTML = 'offset'; div.appendChild(A);
        A = document.createElement('a'); A.classList.add('ALIFddSwitcher'); A.id = 'ALIFDDclient'; A.innerHTML = 'client'; div.appendChild(A);
        A = document.createElement('a'); A.classList.add('ALIFddSwitcher'); A.id = 'ALIFDDscroll'; A.innerHTML = 'scroll'; div.appendChild(A);
        var div2 = document.createElement('div'); div2.id = 'ALIFdimensionsDisplayInner'; div.appendChild(div2);
        if(ALIFcontainerID) ALIFcd = document.getElementById(ALIFcontainerID);
        ALIFdd = document.getElementById('ALIFdimensionsDisplay');
        ALIFddi = document.getElementById('ALIFdimensionsDisplayInner');
        ALIFtimerID = null;
        ALIFshowDimensions = function() {
            var b = document.body;
            var s = '<span>' + window.innerWidth + ' x ' + window.innerHeight + '<\/span> (win innerW x innerH)<hr>';
            if(ALIFddOffset) s += '<span>' + b.offsetWidth + ' x ' + b.offsetHeight + '<\/span> (body offsetW x offsetH)<br>';
            if(ALIFddClient) s += '<span>' + b.clientWidth + ' x ' + b.clientHeight + '<\/span> (body clientW x clientH)<br>';
            if(ALIFddScroll) s += '<span>' + b.scrollWidth + ' x ' + b.scrollHeight + '<\/span> (body scrollW x scrollH)<br>';
            if(ALIFcontainerID) s += '<hr>';
            if(ALIFcontainerID && ALIFddOffset) s += '<span>' + ALIFcd.offsetWidth + ' x ' + ALIFcd.offsetHeight + '<\/span> (' + ALIFcontainerID + ' offsetW x offsetH)<br>';
            if(ALIFcontainerID && ALIFddClient) s += '<span>' + ALIFcd.clientWidth + ' x ' + ALIFcd.clientHeight + '<\/span> (' + ALIFcontainerID + ' clientW x clientH)<br>';
            if(ALIFcontainerID && ALIFddScroll) s += '<span>' + ALIFcd.scrollWidth + ' x ' + ALIFcd.scrollHeight + '<\/span> (' + ALIFcontainerID + ' scrollW x scrollH)<br>';
            ALIFddi.innerHTML = s;
            ALIFtimerID = setTimeout(ALIFshowDimensions, 100);
        };
        ALIFdimensionsToggle = function() {
            ALIFdd.style.display = 'block' == ALIFdd.style.display ? 'none' : 'block';
        };
        ALIFdisplayItemToggle = function() {
            if('offset' == this.id.substr(6,6)) ALIFddOffset = !ALIFddOffset;
            if('client' == this.id.substr(6,6)) ALIFddClient = !ALIFddClient;
            if('scroll' == this.id.substr(6,6)) ALIFddScroll = !ALIFddScroll;
        };
        document.getElementById('ALIFdimensionsButton').addEventListener('click', ALIFdimensionsToggle);
        document.getElementById('ALIFDDoffset').addEventListener('click', ALIFdisplayItemToggle);
        document.getElementById('ALIFDDclient').addEventListener('click', ALIFdisplayItemToggle);
        document.getElementById('ALIFDDscroll').addEventListener('click', ALIFdisplayItemToggle);
        ALIFtimerID = setTimeout(ALIFshowDimensions, 100);
    };
    document.body.onload = ALIFstartDimensions;
</script>\n";
    }

    private function renderUserAccountSwitcher(&$css) {
        if(false === (bool)$this->data['use_user_switcher']) return '';
        if($this->user->isSuperuser()) $this->session->set('alifWasLoggedinAsSuperuser', true);
        if(false === (bool)$this->session->get('alifWasLoggedinAsSuperuser')) return '';
        if(!$this->uas_isValidSessionUser()) return '';
        if(!isset($this->data['user_accounts']) || !is_array($this->data['user_accounts'])) return '';
        $cssTpl = 'div#ALIFadminLinksContainer a#ALIFuser[_UA_] {background-image: url("data:image/svg+xml;utf8,%3Csvg id=\'login\' xmlns=\'http://www.w3.org/2000/svg\' x=\'0px\' y=\'0px\' width=\'22px\' height=\'22px\' viewBox=\'0 0 32 32\'%3E%3Cpath d=\'M 16 4 C 12.145852 4 9 7.1458513 9 11 C 9 13.393064 10.220383 15.517805 12.0625 16.78125 C 8.485554 18.302923 6 21.859881 6 26 L 8 26 C 8 21.533333 11.533333 18 16 18 C 20.466667 18 24 21.533333 24 26 L 26 26 C 26 21.859881 23.514446 18.302923 19.9375 16.78125 C 21.779617 15.517805 23 13.393064 23 11 C 23 7.1458513 19.854148 4 16 4 z M 16 6 C 18.773268 6 21 8.2267317 21 11 C 21 13.773268 18.773268 16 16 16 C 13.226732 16 11 13.773268 11 11 C 11 8.2267317 13.226732 6 16 6 z\' style=\'fill%3Argb(255,255,255)\' %3E%3C/path%3E%3C/svg%3E");}' . "\n";
        $cssTpl .= 'div#ALIFadminLinksContainer a#ALIFuser[_UA_]:hover span:after {content:"[_UA_]"}' . "\n";
        $hex = $this->skins[$this->data['colorset']]['_color'];
        $fillColor = 'fill%3Argb(' . implode(',', array_values(self::sanitizeColor($hex))) . ')';
        $adminLinks = '';
        if($this->hasAOV && in_array('aov', $this->data['buttons_enabled']) && $this->user->isSuperuser()) {
            $adminLinks .= "<a id='ALIFaov' class='ALIFadminlink ALIFadminLinksColor ALIFadminLinksBgColorRegular' href='{$this->config->urls->admin}setup/accessoverview/'><span></span></a>" . "<br class='vertical' />";
        }
        foreach($this->data['user_accounts'] as $ua) {
            $class = $this->user->name == $ua ? ' PwActiveUser' : '';
            $redirectURI = urlencode($this->page->url);
            $link = $class ? 'javascript:;' : "{$this->config->urls->admin}login/?alifRedirectIn={$redirectURI}&amp;switchUA=" . urlencode($ua);
            $u = $this->users->get($ua);
            if(!is_object($u) || $ua != $u->name) continue;
            $adminLinks .= "<a id='ALIFuser{$ua}' class='ALIFadminlink ALIFadminLinksColor ALIFadminLinksBgColorUser{$class}' href='{$link}'><span></span></a>" . "<br class='vertical' />";
            $css = trim($css) . "\n" . str_replace(array('[_UA_]', 'fill%3Argb(255,255,255)'), array($ua, $fillColor), $cssTpl);
        }
        if($adminLinks && (bool)$this->data['user_accounts_extrarow']) {
            $adminLinks = "<br class='horizontal' />" . $adminLinks;
        }
        return $adminLinks;
    }

    private function renderButton($button) {
        if(!in_array($button, $this->data['buttons_enabled'])) return '';
        $validLogin = $this->user->isLoggedin();
        $validUser = true === $this->session->get('alifWasLoggedin') ? true : false;
        $validSuperuser = true === $this->session->get('alifWasLoggedinAsSuperuser') ? true : false;
        if(!$this->user->isLoggedin() && !$validSuperuser && !$validUser) return '';
        $redirectURI = urlencode($this->page->url);
        switch($button) {
            case 'adminpage':
                if($validLogin) {
                    return "<a id='ALIFadminpage' class='ALIFadminlink ALIFadminLinksColor ALIFadminLinksBgColorRegular' href='{$this->config->urls->admin}page/'><span></span></a>" . "<br class='vertical' />";
                }
                break;
            case 'settings':
                if($this->user->isSuperuser()) {
                    return "<a id='ALIFsettings' class='ALIFadminlink ALIFadminLinksColor ALIFadminLinksBgColorRegular' href='{$this->config->urls->admin}module/edit?name=" . __CLASS__ . "'><span></span></a>" . "<br class='vertical' />";
                }
                break;
            case 'destroy':
                if($validLogin && ($this->uas_isValidSessionUser() || $this->data['use_advanced_links'])) {
                    return "<a id='ALIFdestroy' class='ALIFadminlink ALIFadminLinksColor ALIFadminLinksBgColorRegular' href='{$this->config->urls->admin}login/logout/?alifRedirectOut={$redirectURI}&amp;destroySession=destroySession'><span></span></a>" . "<br class='vertical' />";
                }
                break;
            case 'logout':
                if($validLogin) {
                    return "<a id='ALIFlogout' class='ALIFadminlink ALIFadminLinksColor ALIFadminLinksBgColorRegular' href='{$this->config->urls->admin}login/logout/?alifRedirectOut={$redirectURI}'><span></span></a>" . "<br class='vertical' />";
                }
                break;
            case 'login':
                if(!$validLogin && (bool)$this->data['use_advanced_links'] && ($validSuperuser || $validUser)) {
                    return "<a id='ALIFlogin' class='ALIFadminlink ALIFadminLinksColor ALIFadminLinksBgColorRegular' href='{$this->config->urls->admin}login/?alifRedirectIn={$redirectURI}'><span></span></a>" . "<br class='vertical' />";
                }
                break;
            case 'editpage':
                if($validLogin && $this->page->editable()) {
                    return "<a id='ALIFeditpage' class='ALIFadminlink ALIFadminLinksColor ALIFadminLinksBgColorEdit' href='{$this->config->urls->admin}page/edit/?id={$this->page->id}'><span></span></a>" . "<br class='vertical' />";
                }
                break;
            case 'debugmode':
                if(($validLogin || $validUser || $validSuperuser) && $this->config->debug) {
                    return "<a id='ALIFdebugmode' class='ALIFadminlink ALIFadminLinksColor ALIFadminLinksBgColorWarning' href='javascript:;'><span></span></a>" . "<br class='vertical' />";
                }
                break;
            case 'imagesizerforcenew':
                if(($validLogin || $validUser || $validSuperuser) && isset($this->config->imageSizerOptions['forceNew']) && $this->config->imageSizerOptions['forceNew']) {
                    return "<a id='ALIFimagesizerforcenew' class='ALIFadminlink ALIFadminLinksColor ALIFadminLinksBgColorWarning' href='{$this->config->urls->admin}module/edit?name=PageimageAssistant'><span></span></a>" . "<br class='vertical' />";
                }
                break;
//            case 'aov':
//                if($this->hasAOV && $validLogin && $validSuperuser) {
//                    return "<a id='ALIFaov' class='ALIFadminlink ALIFadminLinksColor ALIFadminLinksBgColorInfo' href='{$this->config->urls->admin}setup/accessoverview/'><span></span></a>" . "<br class='vertical' />";
//                }
//                break;
            case 'dimensions':
                if($validLogin) {
                    return "<a id='ALIFdimensionsButton' class='ALIFadminlink ALIFadminLinksColor ALIFadminLinksBgColorRegular' href='javascript:;'><span></span></a>" . "<br class='vertical' />";
                }
                break;
            default:
                return '';
        }
        return '';
    }



    // ALIF API methods ;-)
    public function render() {
        $data = $this->data;
        foreach(array('skin1', 'skin2', 'skin3', 'skin4') as $key) {
            $skin = array();
            foreach(array('_bg_regular', '_bg_edit', '_bg_info', '_bg_warning', '_color') as $attribute) {
                $skin[$attribute] = $data[$key . $attribute];
            }
            $this->skins[$key] = $skin;
        }
        $skin = $this->skins[$data['colorset']];
        $search = array_keys($skin);
        $search[] = 'content:"Login"';
        $search[] = 'content:"Logout"';
        $search[] = 'content:"Admin"';
        $search[] = 'content:"Edit"';
        $search[] = 'content:"Debugmode"';
        $search[] = 'content:"ForceNew!"';
        $search[] = 'content:"Settings"';
        $search[] = 'content:"Session"';
        $search[] = '[_POSA_]';
        $search[] = '[_POSAPX_]';
        $search[] = '[_POSB_]';
        $search[] = '[_POSBPX_]';
        $search[] = '[_ZINDEX_]';
        $search[] = '[_ZINDEX2_]';
        $search[] = '[_POSCPX_]';
        $search[] = '[_POSDPX_]';
        $replace = array_values($skin);
        foreach($replace as $k => $v) $replace[$k] = 'rgb(' . implode(',', array_values(self::sanitizeColor($v))) . ')';
        $replace[] = 'content:"' . $this->lang(21) . '"';
        $replace[] = 'content:"' . $this->lang(22) . '"';
        $replace[] = 'content:"' . $this->lang(23) . '"';
        $replace[] = 'content:"' . $this->lang(24) . '"';
        $replace[] = 'content:"' . $this->lang(25) . '"';
        $replace[] = 'content:"' . $this->lang(26) . '"';
        $replace[] = 'content:"' . $this->lang(27) . '"';
        $replace[] = 'content:"Session ' . $this->uas_sessionTimeToLiveInformational() . '"';
        $replace[] = $data['position_tb'];
        $replace[] = $data['position_tb_px'];
        $replace[] = $data['position_lr'];
        $replace[] = $data['position_lr_px'];
        $replace[] = $data['zindex'];
        $replace[] = strval(intval($data['zindex'] - 1));
        $replace[] = '0';
        $replace[] = '0';
        $fill = 'fill%3Argb(' . implode(',', array_values(self::sanitizeColor($skin['_color']))) . ')';
        $search[] = 'fill%3Argb(255,255,255)';
        $replace[] = $fill;
        $css = trim(str_replace($search, $replace, self::$css));

        $adminLinks = '';
        $dimensions = false;
        foreach(array_keys(self::$buttons) as $button) {
            if('dimensions' == $button) {
                $ret = $this->renderButton($button);
                if($ret) {
                    $dimensions = true;
                    $adminLinks .= $ret;
                }
            } else {
                $adminLinks .= $this->renderButton($button);
            }
        }
        $adminLinks .= $this->renderUserAccountSwitcher($css);
        if(0 == strlen(trim($adminLinks))) {
            return '';
        }
        $class = $data['stacked'] == 'horizontal' ? 'horizontal' : 'vertical';
        $class .= 'right' == $data['position_lr'] ? ' right' : '';
        $adminLinks = "<!-- AdminLinks -->\n<div id='ALIFadminLinksContainer' class='{$class}'>" . $adminLinks . "</div>\n<!-- AdminLinks -->\n";
        return "\n<style type=\"text/css\">\n{$css}\n</style>\n{$adminLinks}\n" . ($dimensions ? $this->renderDimensionsDisplay() : '');
    }

}



