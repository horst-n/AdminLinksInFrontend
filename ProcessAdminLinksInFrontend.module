<?php
/**
*  Module: ALIF - Admin Links In Frontend
*  Author: Horst Nogajski, http://nogajski.de/
*
*  Admin Helper, can display an admin toolbar on the frontend of a site!
*
*
*  ProcessWire 2.3+
*  Copyright (C) 2010 by Ryan Cramer
*  Licensed under GNU/GPL v2, see LICENSE.TXT
*
*  http://www.processwire.com
*  http://www.ryancramer.com
*/

class ProcessAdminLinksInFrontend extends Process {

    private static $pwv = '';
    private static $pwvRequires = '2.5.0';
    private static $opcEnabled = false;

    public static function getModuleInfo() {
        $summary = __('Adds a View-Page to the admin that presents OPCacheStatus, provided by Rasmus Lerdorf, https://github.com/rlerdorf/opcache-status');
        $requires = 'AdminLinksInFrontend';
        if(version_compare(self::$pwv, self::$pwvRequires, '>')) $requires .= ', ProcessWire>=2.3.0, PHP>=5.4.0';
        $info = array(
            'title'    => 'ALIF - Admin Links In Frontend :: OPCache Viewer',
            'version'  => '0.9.15',
            'author'   => 'Horst Nogajski',
            'summary'  => $summary,
            'singular' => true,
            'autoload' => false,
            'requires' => $requires,
            'permission' => 'logs-view',
            'icon'     => 'link',
        );
        return $info;
    }

    public function __construct() {
        self::$pwv = wire('config')->version;
        if(function_exists('opcache_get_status') && version_compare(PHP_VERSION, '5.4.0', '>')) {
            self::$opcEnabled = opcache_get_status()['opcache_enabled'];
        }
    }

    public function ___install() {
        if(!self::$opcEnabled) return;
        $p = $this->pages->get(22)->children('include=hidden')->get('name=' . AdminLinksInFrontend::opcPageName);
        if(0 == $p->id) {
            $p = new Page();
            $p->template = $this->templates->get('admin');
            $p->parent = $this->pages->get(22); // 3 = /admin/pages | 22 = /admin/setup
            $p->title = 'OPCache Viewer';
            $p->name = AdminLinksInFrontend::opcPageName;
            $p->process = $this;
            #$p->addStatus(Page::statusHidden);
            $p->save();
        }
    }

    public function ___uninstall() {
        $p = $this->pages->get(22)->children('include=hidden')->get('name=' . AdminLinksInFrontend::opcPageName);
        if($p->id) $p->delete();
    }

    public function ___execute() {
        $this->setFuel('processHeadline', 'OPCache Viewer');
        $src = dirname(__FILE__) . '/opcache.php';
        if(!is_readable($src)) return _("Required file is missing or not readable: site/modules/AdminLinksInFrontend/opcache.php");
        if(!class_exists('OpCacheDataModel')) {
            ob_start();
            require_once($src);
            ob_end_clean();
        }
        if(!class_exists('OpCacheDataModel')) return _("Required file could not be loaded: site/modules/AdminLinksInFrontend/opcache.php");
        return $this->markup();
    }

    private function markup() {
        $dataModel = new OpCacheDataModel();
return '
<style type="text/css">
    #opc_container {
        width: 1024px;
        margin: auto;
        position: relative;
    }

    #opc_container table {
        border-collapse: collapse;
    }

    #opc_container tbody tr:nth-child(even) {
        background-color: #eee !important;
    }

    #opc_container p.capitalize {
        text-transform: capitalize !important;
    }

    #opc_container .tabs {
        position: relative;
        float: left;
        width: 60%;
    }

    #opc_container .tab {
        float: left;
    }

    #opc_container .tab label {
        background: #eee !important;
        padding: 10px 12px !important;
        border: 1px solid #ccc !important;
        margin-left: -1px !important;
        position: relative;
        left: 1px !important;
    }

    #opc_container .tab [type=radio] {
        display: none;
    }

    #opc_container .tab th, #opc_container .tab td {
        padding: 8px 12px !important;
        color: #000 !important;
        font-size: 16px !important;
        font-weight: bold !important;
    }

    #opc_container .opc_content {
        position: absolute;
        top: 28px;
        left: 0;
        background: white !important;
        border: 1px solid #ccc !important;
        height: 450px;
        width: 100%;
        overflow: auto;
    }

    #opc_container .opc_content table {
        width: 100%;
    }

    #opc_container .opc_content th, #opc_container .tab:nth-child(3) td {
        text-align: left;
    }

    #opc_container .opc_content td {
        text-align: right;
    }

    .clickable {
        cursor: pointer;
    }

    [type=radio]:checked ~ label {
        background: white !important;
        border-bottom: 1px solid white !important;
        z-index: 2;
    }

    [type=radio]:checked ~ label ~ .opc_content {
        z-index: 1;
    }

    #graph {
        float: right;
        width: 40%;
        position: relative;
    }

    #graph > form {
        position: absolute;
        right: 60px;
        top: -20px;
    }

    #graph > svg {
        position: absolute;
        top: 0;
        right: 0;
    }

    #graph * {
        color: #000 !important;
    }

    #opc_container #stats {
        position: absolute;
        right: 125px;
        top: 145px;
    }

    #opc_container #stats th, #opc_container #stats td {
        padding: 6px 10px;
        font-size: 0.8em;
    }

    label {
        cursor: pointer;
    }

    #opc_container {
        height: 550px;
    }

    #opc_container h1 {
        font-size: 18px !important;
        font-weight:bold !important;
        margin: 20px auto 30px auto !important;
    }

</style>
<script src="//cdnjs.cloudflare.com/ajax/libs/d3/3.0.1/d3.v3.min.js"></script>
<script type="text/javascript">
    var hidden = {};
    function toggleVisible(head, row) {
        if (!hidden[row]) {
            d3.selectAll(row).transition().style("display", "none");
            hidden[row] = true;
            d3.select(head).transition().style("color", "#ccc !important");
        } else {
            d3.selectAll(row).transition().style("display");
            hidden[row] = false;
            d3.select(head).transition().style("color", "#000 !important");
        }
    }
</script>

    <div id="opc_container">
        <h1>' . $dataModel->getPageTitle() . '</h1>

        <div class="tabs">

            <div class="tab">
                <input type="radio" id="tab-status" name="tab-group-1" checked>
                <label for="tab-status">Status</label>
                <div class="opc_content">
                    <table>
                        ' . $dataModel->getStatusDataRows() . '
                    </table>
                </div>
            </div>

            <div class="tab">
                <input type="radio" id="tab-config" name="tab-group-1">
                <label for="tab-config">Configuration</label>
                <div class="opc_content">
                    <table>
                        ' . $dataModel->getConfigDataRows() . '
                    </table>
                </div>
            </div>

            <div class="tab">
                <input type="radio" id="tab-scripts" name="tab-group-1">
                <label for="tab-scripts">Scripts (' . $dataModel->getScriptStatusCount() . ')</label>
                <div class="opc_content">
                    <table style="font-size:0.8em;">
                        <tr>
                            <th width="10%">Hits</th>
                            <th width="20%">Memory</th>
                            <th width="70%">Path</th>
                        </tr>
                        ' . $dataModel->getScriptStatusRows() . '
                    </table>
                </div>
            </div>

        </div>

        <div id="graph">
            <form>
                <label><input type="radio" name="dataset" value="memory" checked> Memory</label>
                <label><input type="radio" name="dataset" value="keys"> Keys</label>
                <label><input type="radio" name="dataset" value="hits"> Hits</label>
                <label><input type="radio" name="dataset" value="restarts"> Restarts</label>
            </form>

            <div id="stats"></div>
        </div>
    </div>
    <div style="clear:both !important"></div>


    <script type="text/javascript">
        var dataset = ' . $dataModel->getGraphDataSetJson() . ';

        var width = 400,
            height = 400,
            radius = Math.min(width, height) / 2,
            colours = ["#B41F1F", "#1FB437", "#ff7f0e"];

        d3.scale.customColours = function() {
            return d3.scale.ordinal().range(colours);
        };

        var colour = d3.scale.customColours();
        var pie = d3.layout.pie().sort(null);

        var arc = d3.svg.arc().innerRadius(radius - 20).outerRadius(radius - 50);
        var svg = d3.select("#graph").append("svg")
                    .attr("width", width)
                    .attr("height", height)
                    .append("g")
                    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        var path = svg.selectAll("path")
                      .data(pie(dataset.memory))
                      .enter().append("path")
                      .attr("fill", function(d, i) { return colour(i); })
                      .attr("d", arc)
                      .each(function(d) { this._current = d; }); // store the initial values

        d3.selectAll("input").on("change", change);
        set_text("memory");

        function set_text(t) {
            if (t === "memory") {
                d3.select("#stats").html(
                    "<table><tr><th style=\"background:#B41F1F\">Used</th><td>' . $dataModel->getHumanUsedMemory() . '</td></tr>"+
                    "<tr><th style=\"background:#1FB437\">Free</th><td>' . $dataModel->getHumanFreeMemory() . '</td></tr>"+
                    "<tr><th style=\"background:#ff7f0e\" rowspan=\"2\">Wasted</th><td>' . $dataModel->getHumanWastedMemory() . '</td></tr>"+
                    "<tr><td>' . $dataModel->getWastedMemoryPercentage() . '%</td></tr></table>"
                );
            } else if (t === "keys") {
                d3.select("#stats").html(
                    "<table><tr><th style=\"background:#B41F1F\">Cached keys</th><td>"+format_value(dataset[t][0])+"</td></tr>"+
                    "<tr><th style=\"background:#1FB437\">Free Keys</th><td>"+format_value(dataset[t][1])+"</td></tr></table>"
                );
            } else if (t === "hits") {
                d3.select("#stats").html(
                    "<table><tr><th style=\"background:#B41F1F\">Misses</th><td>"+format_value(dataset[t][0])+"</td></tr>"+
                    "<tr><th style=\"background:#1FB437\">Cache Hits</th><td>"+format_value(dataset[t][1])+"</td></tr></table>"
                );
            } else if (t === "restarts") {
                d3.select("#stats").html(
                    "<table><tr><th style=\"background:#B41F1F\">Memory</th><td>"+dataset[t][0]+"</td></tr>"+
                    "<tr><th style=\"background:#1FB437\">Manual</th><td>"+dataset[t][1]+"</td></tr>"+
                    "<tr><th style=\"background:#ff7f0e\">Keys</th><td>"+dataset[t][2]+"</td></tr></table>"
                );
            }
        }

        function change() {
            // Filter out any zero values to see if there is anything left
            var remove_zero_values = dataset[this.value].filter(function(value) {
                return value > 0;
            });

            // Skip if the value is undefined for some reason
            if (typeof dataset[this.value] !== "undefined" && remove_zero_values.length > 0) {
                $("#graph").find("> svg").show();
                path = path.data(pie(dataset[this.value])); // update the data
                path.transition().duration(750).attrTween("d", arcTween); // redraw the arcs
            } else {
                $("#graph").find("> svg").hide();
            }

            set_text(this.value);
        }

        function arcTween(a) {
            var i = d3.interpolate(this._current, a);
            this._current = i(0);
            return function(t) {
                return arc(i(t));
            };
        }

        function size_for_humans(bytes) {
            if (bytes > 1048576) {
                return (bytes/1048576).toFixed(2) + " MB";
            } else if (bytes > 1024) {
                return (bytes/1024).toFixed(2) + " KB";
            } else return bytes + " bytes";
        }

        function format_value(value) {
            if (dataset["TSEP"] == 1) {
                return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            } else {
                return value;
            }
        }

        var w = window.innerWidth,
            h = window.innerHeight,
            x = d3.scale.linear().range([0, w]),
            y = d3.scale.linear().range([0, h]);

        var vis = d3.select("#partition")
                    .style("width", w + "px")
                    .style("height", h + "px")
                    .append("svg:svg")
                    .attr("width", w)
                    .attr("height", h);

        var partition = d3.layout.partition()
                .value(function(d) { return d.size; });

        root = JSON.parse(\'' . json_encode($dataModel->getD3Scripts()) . '\');

        var g = vis.selectAll("g")
                   .data(partition.nodes(root))
                   .enter().append("svg:g")
                   .attr("transform", function(d) { return "translate(" + x(d.y) + "," + y(d.x) + ")"; })
                   .on("click", click);

        var kx = w / root.dx,
                ky = h / 1;

        g.append("svg:rect")
         .attr("width", root.dy * kx)
         .attr("height", function(d) { return d.dx * ky; })
         .attr("class", function(d) { return d.children ? "parent" : "child"; });

        g.append("svg:text")
         .attr("transform", transform)
         .attr("dy", ".35em")
         .style("opacity", function(d) { return d.dx * ky > 12 ? 1 : 0; })
         .text(function(d) { return d.name; })

        d3.select(window)
          .on("click", function() { click(root); })

        function click(d) {
            if (!d.children) return;

            kx = (d.y ? w - 40 : w) / (1 - d.y);
            ky = h / d.dx;
            x.domain([d.y, 1]).range([d.y ? 40 : 0, w]);
            y.domain([d.x, d.x + d.dx]);

            var t = g.transition()
                     .duration(d3.event.altKey ? 7500 : 750)
                     .attr("transform", function(d) { return "translate(" + x(d.y) + "," + y(d.x) + ")"; });

            t.select("rect")
             .attr("width", d.dy * kx)
             .attr("height", function(d) { return d.dx * ky; });

            t.select("text")
             .attr("transform", transform)
             .style("opacity", function(d) { return d.dx * ky > 12 ? 1 : 0; });

            d3.event.stopPropagation();
        }

        function transform(d) {
            return "translate(8," + d.dx * ky / 2 + ")";
        }

</script>
';
    }

}

